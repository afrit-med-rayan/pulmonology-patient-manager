"use strict";const APP_CONFIG={name: 'Patient Management System',version: '1.0.0',author: 'Dr. S. Sahboub',description: 'Local Patient Management System for Pulmonology Practice'};const STORAGE_CONFIG={dataDirectory: 'C:\\PneumoApp\\Patients\\',assetsDirectory: 'C:\\PneumoApp\\assets\\',backupDirectory: 'C:\\PneumoApp\\backups\\',logoPath: 'assets/logo.svg',faviconPath: 'assets/favicon.ico'};const AUTH_CONFIG={sessionTimeout: 8*60*60*1000,maxLoginAttempts: 5,lockoutDuration: 15*60*1000,sessionStorageKey: 'pms_session',credentialsStorageKey: 'pms_credentials'};const UI_CONFIG={toastDuration: 5000,loadingDelay: 500,animationDuration: 300,searchDebounceDelay: 300,autoSaveInterval: 30000};const VALIDATION_RULES={patient:{firstName:{required: true,minLength: 2,maxLength: 50,pattern:/^[a-zA-Z\s\-']+$/},lastName:{required: true,minLength: 2,maxLength: 50,pattern:/^[a-zA-Z\s\-']+$/},dateOfBirth:{required: true,maxDate: new Date()},placeOfResidence:{required: true,minLength: 2,maxLength: 100},gender:{required: true,options: ['male','female','other']}}};const ERROR_MESSAGES={auth:{invalidCredentials: 'Invalid username or password',sessionExpired: 'Your session has expired. Please log in again.',accessDenied: 'Access denied. Please log in.',tooManyAttempts: 'Too many login attempts. Please try again later.'},storage:{saveError: 'Failed to save data. Please try again.',loadError: 'Failed to load data. Please refresh the page.',deleteError: 'Failed to delete record. Please try again.',accessError: 'Unable to access local storage. Please check permissions.',corruptData: 'Data appears to be corrupted. Please contact support.'},validation:{required: 'This field is required',minLength: 'Must be at least {min} characters long',maxLength: 'Must be no more than {max} characters long',pattern: 'Please enter a valid value',email: 'Please enter a valid email address',date: 'Please enter a valid date',future: 'Date cannot be in the future'},network:{offline: 'You are currently offline',timeout: 'Request timed out. Please try again.',serverError: 'Server error. Please try again later.'}};const SUCCESS_MESSAGES={patient:{created: 'Patient record created successfully',updated: 'Patient record updated successfully',deleted: 'Patient record deleted successfully'},auth:{loginSuccess: 'Welcome back!',logoutSuccess: 'You have been logged out successfully'},general:{saved: 'Changes saved successfully',deleted: 'Item deleted successfully',copied: 'Copied to clipboard'}};const ROUTES={login: '#/login',dashboard: '#/dashboard',patients:{list: '#/patients',create: '#/patients/create',view: '#/patients/view/:id',edit: '#/patients/edit/:id'}};const PATIENT_SCHEMA={id: '',firstName: '',lastName: '',dateOfBirth: null,age: 0,placeOfResidence: '',gender: '',visits: [],createdAt: null,updatedAt: null};const VISIT_SCHEMA={id: '',visitDate: null,medications: '',observations: '',additionalComments: '',createdAt: null};if(typeof module!=='undefined'&&module.exports){module.exports={APP_CONFIG,STORAGE_CONFIG,AUTH_CONFIG,UI_CONFIG,VALIDATION_RULES,ERROR_MESSAGES,SUCCESS_MESSAGES,ROUTES,PATIENT_SCHEMA,VISIT_SCHEMA};} function generateId(){return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,function(c){const r=Math.random()*16|0;const v=c==='x' ? r :(r&0x3|0x8);return v.toString(16);});} function formatDate(date,format='short'){if(!date)return '';const dateObj=typeof date==='string' ? new Date(date): date;if(isNaN(dateObj.getTime()))return '';const options={short:{year: 'numeric',month: '2-digit',day: '2-digit'},long:{year: 'numeric',month: 'long',day: 'numeric'},time:{hour: '2-digit',minute: '2-digit'}};return dateObj.toLocaleDateString('en-US',options[format]||options.short);} function calculateAge(dateOfBirth){if(!dateOfBirth)return 0;const birthDate=typeof dateOfBirth==='string' ? new Date(dateOfBirth): dateOfBirth;const today=new Date();let age=today.getFullYear()-birthDate.getFullYear();const monthDiff=today.getMonth()-birthDate.getMonth();if(monthDiff<0||(monthDiff===0&&today.getDate()<birthDate.getDate())){age--;} return age;} function sanitizeHtml(html){if(!html)return '';const div=document.createElement('div');div.textContent=html;return div.innerHTML;} function debounce(func,wait){let timeout;return function executedFunction(...args){const later=()=>{clearTimeout(timeout);func(...args);};clearTimeout(timeout);timeout=setTimeout(later,wait);};} function deepClone(obj){if(obj===null||typeof obj!=='object')return obj;if(obj instanceof Date)return new Date(obj.getTime());if(obj instanceof Array)return obj.map(item=>deepClone(item));if(typeof obj==='object'){const clonedObj={};for(const key in obj){if(obj.hasOwnProperty(key)){clonedObj[key]=deepClone(obj[key]);}} return clonedObj;}} function isEqual(obj1,obj2){if(obj1===obj2)return true;if(obj1==null||obj2==null)return false;if(typeof obj1!==typeof obj2)return false;if(typeof obj1==='object'){const keys1=Object.keys(obj1);const keys2=Object.keys(obj2);if(keys1.length!==keys2.length)return false;for(const key of keys1){if(!keys2.includes(key)||!isEqual(obj1[key],obj2[key])){return false;}} return true;} return false;} function isValidEmail(email){const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email);} function capitalizeWords(str){if(!str)return '';return str.replace(/\w\S*/g,(txt)=>txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase());} function formatFileSize(bytes){if(bytes===0)return '0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];} function getCurrentTimestamp(){return Date.now();} function formatTimestamp(timestamp){return formatDate(new Date(timestamp),'long')+' at '+formatDate(new Date(timestamp),'time');} function containsSearchTerm(str,searchTerm){if(!str||!searchTerm)return false;return str.toLowerCase().includes(searchTerm.toLowerCase());} function escapeRegex(str){return str.replace(/[.*+?^${}()|[\]\\]/g,'\\$&');} function getBrowserInfo(){const ua=navigator.userAgent;let browser='Unknown';if(ua.includes('Chrome'))browser='Chrome';else if(ua.includes('Firefox'))browser='Firefox';else if(ua.includes('Safari'))browser='Safari';else if(ua.includes('Edge'))browser='Edge';return {name: browser,userAgent: ua,language: navigator.language,platform: navigator.platform};} function sanitizePatientName(name){if(!name)return '';const sanitized=sanitizeHtml(name).trim();return sanitized.replace(/\s+/g,' ').replace(/\b\w/g,l=>l.toUpperCase());} function formatPhoneNumber(phone){if(!phone)return '';const digits=phone.replace(/\D/g,'');if(digits.length===10){return `(${digits.slice(0,3)})${digits.slice(3,6)}-${digits.slice(6)}`;} else if(digits.length===11&&digits[0]==='1'){return `+1(${digits.slice(1,4)})${digits.slice(4,7)}-${digits.slice(7)}`;} return phone;} function sanitizeMedicalText(text){if(!text)return '';const sanitized=sanitizeHtml(text);return sanitized .replace(/\r\n/g,'\n').replace(/\r/g,'\n').replace(/\n {3,}/g,'\n\n').trim();} function formatDateForInput(date){if(!date)return '';const dateObj=typeof date==='string' ? new Date(date): date;if(isNaN(dateObj.getTime()))return '';const year=dateObj.getFullYear();const month=String(dateObj.getMonth()+1).padStart(2,'0');const day=String(dateObj.getDate()).padStart(2,'0');return `${year}-${month}-${day}`;} function parseDateFromInput(dateString){if(!dateString)return null;const date=new Date(dateString);return isNaN(date.getTime())? null : date;} function formatGender(gender){if(!gender)return '';const normalized=gender.toLowerCase().trim();switch(normalized){case 'male': case 'm': return 'Male';case 'female': case 'f': return 'Female';case 'other': case 'o': return 'Other';default: return capitalizeWords(gender);}} function normalizeGender(gender){if(!gender)return '';const normalized=gender.toLowerCase().trim();switch(normalized){case 'male': case 'm': return 'male';case 'female': case 'f': return 'female';case 'other': case 'o': return 'other';default: return normalized;}} function truncateText(text,maxLength){if(!text||text.length<=maxLength)return text;return text.substring(0,maxLength-3)+'...';} function removeSpecialCharacters(text){if(!text)return '';return text.replace(/[^\w\s\-'.,!?]/g,'').trim();} function validateAge(age){const numAge=typeof age==='string' ? parseInt(age,10): age;if(isNaN(numAge)||numAge<0||numAge>150){return 0;} return numAge;} function normalizeForSearch(text){if(!text)return '';return text .toLowerCase().trim().replace(/[^\w\s]/g,'').replace(/\s+/g,' ');} function createInitials(firstName,lastName){const first=firstName ? firstName.charAt(0).toUpperCase(): '';const last=lastName ? lastName.charAt(0).toUpperCase(): '';return first+last;} function formatVisitSummary(visit){if(!visit)return '';const date=formatDate(visit.visitDate);const hasContent=visit.medications||visit.observations||visit.additionalComments;if(!hasContent){return `Visit on ${date}`;} const parts=[];if(visit.medications)parts.push('medications');if(visit.observations)parts.push('observations');if(visit.additionalComments)parts.push('comments');return `Visit on ${date}(${parts.join(',')})`;} function isDevelopment(){return location.hostname==='localhost'||location.hostname==='127.0.0.1';} function log(message,level='info'){if(isDevelopment()){const timestamp=new Date().toISOString();console[level](`[${timestamp}] ${message}`);}} if(typeof module!=='undefined'&&module.exports){module.exports={generateId,formatDate,calculateAge,sanitizeHtml,debounce,deepClone,isEqual,isValidEmail,capitalizeWords,formatFileSize,getCurrentTimestamp,formatTimestamp,containsSearchTerm,escapeRegex,getBrowserInfo,isDevelopment,log,sanitizePatientName,formatPhoneNumber,sanitizeMedicalText,formatDateForInput,parseDateFromInput,formatGender,normalizeGender,truncateText,removeSpecialCharacters,validateAge,normalizeForSearch,createInitials,formatVisitSummary};} function validatePatientForm(formData){const errors={};let isValid=true;const firstNameResult=validateFirstName(formData.firstName);if(!firstNameResult.isValid){errors.firstName=firstNameResult.errors;isValid=false;} const lastNameResult=validateLastName(formData.lastName);if(!lastNameResult.isValid){errors.lastName=lastNameResult.errors;isValid=false;} const dobResult=validateDateOfBirth(formData.dateOfBirth);if(!dobResult.isValid){errors.dateOfBirth=dobResult.errors;isValid=false;} const residenceResult=validatePlaceOfResidence(formData.placeOfResidence);if(!residenceResult.isValid){errors.placeOfResidence=residenceResult.errors;isValid=false;} const genderResult=validateGender(formData.gender);if(!genderResult.isValid){errors.gender=genderResult.errors;isValid=false;} if(formData.visits&&Array.isArray(formData.visits)){const visitsResult=validateVisits(formData.visits);if(!visitsResult.isValid){errors.visits=visitsResult.errors;isValid=false;}} return {isValid,errors};} function validateFirstName(firstName){const errors=[];const rules=VALIDATION_RULES.patient.firstName;if(!firstName||firstName.trim()===''){errors.push(ERROR_MESSAGES.validation.required);} else {const trimmed=firstName.trim();if(trimmed.length<rules.minLength){errors.push(ERROR_MESSAGES.validation.minLength.replace('{min}',rules.minLength));} if(trimmed.length>rules.maxLength){errors.push(ERROR_MESSAGES.validation.maxLength.replace('{max}',rules.maxLength));} if(!rules.pattern.test(trimmed)){errors.push('First name can only contain letters,spaces,hyphens,and apostrophes');}} return {isValid: errors.length===0,errors};} function validateLastName(lastName){const errors=[];const rules=VALIDATION_RULES.patient.lastName;if(!lastName||lastName.trim()===''){errors.push(ERROR_MESSAGES.validation.required);} else {const trimmed=lastName.trim();if(trimmed.length<rules.minLength){errors.push(ERROR_MESSAGES.validation.minLength.replace('{min}',rules.minLength));} if(trimmed.length>rules.maxLength){errors.push(ERROR_MESSAGES.validation.maxLength.replace('{max}',rules.maxLength));} if(!rules.pattern.test(trimmed)){errors.push('Last name can only contain letters,spaces,hyphens,and apostrophes');}} return {isValid: errors.length===0,errors};} function validateDateOfBirth(dateOfBirth){const errors=[];if(!dateOfBirth){errors.push(ERROR_MESSAGES.validation.required);} else {const date=typeof dateOfBirth==='string' ? new Date(dateOfBirth): dateOfBirth;const today=new Date();const minDate=new Date(today.getFullYear()-150,today.getMonth(),today.getDate());if(isNaN(date.getTime())){errors.push(ERROR_MESSAGES.validation.date);} else {if(date>today){errors.push(ERROR_MESSAGES.validation.future);} if(date<minDate){errors.push('Date of birth cannot be more than 150 years ago');}}} return {isValid: errors.length===0,errors};} function validatePlaceOfResidence(placeOfResidence){const errors=[];const rules=VALIDATION_RULES.patient.placeOfResidence;if(!placeOfResidence||placeOfResidence.trim()===''){errors.push(ERROR_MESSAGES.validation.required);} else {const trimmed=placeOfResidence.trim();if(trimmed.length<rules.minLength){errors.push(ERROR_MESSAGES.validation.minLength.replace('{min}',rules.minLength));} if(trimmed.length>rules.maxLength){errors.push(ERROR_MESSAGES.validation.maxLength.replace('{max}',rules.maxLength));}} return {isValid: errors.length===0,errors};} function validateGender(gender){const errors=[];const rules=VALIDATION_RULES.patient.gender;if(!gender||gender.trim()===''){errors.push(ERROR_MESSAGES.validation.required);} else {const normalized=gender.trim().toLowerCase();if(!rules.options.includes(normalized)){errors.push('Gender must be one of: '+rules.options.join(','));}} return {isValid: errors.length===0,errors};} function validateVisits(visits){const errors=[];let isValid=true;if(!Array.isArray(visits)){errors.push('Visits must be an array');return {isValid: false,errors};} visits.forEach((visit,index)=>{const visitResult=validateVisit(visit);if(!visitResult.isValid){errors[index]=visitResult.errors;isValid=false;}});return {isValid,errors};} function validateVisit(visit){const errors={};let isValid=true;const visitDateResult=validateVisitDate(visit.visitDate);if(!visitDateResult.isValid){errors.visitDate=visitDateResult.errors;isValid=false;} if(visit.medications){const medicationsResult=validateMedications(visit.medications);if(!medicationsResult.isValid){errors.medications=medicationsResult.errors;isValid=false;}} if(visit.observations){const observationsResult=validateObservations(visit.observations);if(!observationsResult.isValid){errors.observations=observationsResult.errors;isValid=false;}} if(visit.additionalComments){const commentsResult=validateAdditionalComments(visit.additionalComments);if(!commentsResult.isValid){errors.additionalComments=commentsResult.errors;isValid=false;}} return {isValid,errors};} function validateVisitDate(visitDate){const errors=[];if(!visitDate){errors.push(ERROR_MESSAGES.validation.required);} else {const date=typeof visitDate==='string' ? new Date(visitDate): visitDate;const today=new Date();const futureLimit=new Date(today.getTime()+(7*24*60*60*1000));if(isNaN(date.getTime())){errors.push(ERROR_MESSAGES.validation.date);} else if(date>futureLimit){errors.push('Visit date cannot be more than 7 days in the future');}} return {isValid: errors.length===0,errors};} function validateMedications(medications){const errors=[];const maxLength=1000;if(medications&&medications.length>maxLength){errors.push(ERROR_MESSAGES.validation.maxLength.replace('{max}',maxLength));} return {isValid: errors.length===0,errors};} function validateObservations(observations){const errors=[];const maxLength=2000;if(observations&&observations.length>maxLength){errors.push(ERROR_MESSAGES.validation.maxLength.replace('{max}',maxLength));} return {isValid: errors.length===0,errors};} function validateAdditionalComments(additionalComments){const errors=[];const maxLength=1000;if(additionalComments&&additionalComments.length>maxLength){errors.push(ERROR_MESSAGES.validation.maxLength.replace('{max}',maxLength));} return {isValid: errors.length===0,errors};} function validateField(fieldName,value){switch(fieldName){case 'firstName': return validateFirstName(value);case 'lastName': return validateLastName(value);case 'dateOfBirth': return validateDateOfBirth(value);case 'placeOfResidence': return validatePlaceOfResidence(value);case 'gender': return validateGender(value);case 'visitDate': return validateVisitDate(value);case 'medications': return validateMedications(value);case 'observations': return validateObservations(value);case 'additionalComments': return validateAdditionalComments(value);default: return {isValid: true,errors: []};}} function getFieldValidationRules(fieldName){const patientRules=VALIDATION_RULES.patient;switch(fieldName){case 'firstName': case 'lastName': case 'placeOfResidence': case 'gender': case 'dateOfBirth': return patientRules[fieldName]||{};default: return {};}} function isFieldRequired(fieldName){const rules=getFieldValidationRules(fieldName);return rules.required===true;} function formatValidationErrors(errors){const messages=[];for(const field in errors){if(Array.isArray(errors[field])){errors[field].forEach(error=>{messages.push(`${capitalizeWords(field.replace(/([A-Z])/g,' $1'))}: ${error}`);});} else if(typeof errors[field]==='object'){for(const subField in errors[field]){if(Array.isArray(errors[field][subField])){errors[field][subField].forEach(error=>{messages.push(`${capitalizeWords(field)}${subField}: ${error}`);});}}}} return messages;} function createValidationSummary(validationResult){const messages=formatValidationErrors(validationResult.errors);return {isValid: validationResult.isValid,errorCount: messages.length,messages: messages,hasErrors: messages.length>0};} if(typeof module!=='undefined'&&module.exports){module.exports={validatePatientForm,validateFirstName,validateLastName,validateDateOfBirth,validatePlaceOfResidence,validateGender,validateVisits,validateVisit,validateVisitDate,validateMedications,validateObservations,validateAdditionalComments,validateField,getFieldValidationRules,isFieldRequired,formatValidationErrors,createValidationSummary};} class Patient {constructor(data={}){this.id=data.id||generateId();this.firstName=data.firstName||'';this.lastName=data.lastName||'';this.dateOfBirth=data.dateOfBirth||null;this.age=data.age||this.calculateAge();this.placeOfResidence=data.placeOfResidence||'';this.gender=data.gender||'';this.visits=data.visits||[];this.createdAt=data.createdAt||getCurrentTimestamp();this.updatedAt=data.updatedAt||getCurrentTimestamp();} calculateAge(){if(!this.dateOfBirth)return 0;return calculateAge(this.dateOfBirth);} updateAge(){this.age=this.calculateAge();} addVisit(visitData){const visit={id: generateId(),visitDate: visitData.visitDate||new Date().toISOString().split('T')[0],medications: visitData.medications||'',observations: visitData.observations||'',additionalComments: visitData.additionalComments||'',createdAt: getCurrentTimestamp()};this.visits.push(visit);this.updatedAt=getCurrentTimestamp();return visit;} updateVisit(visitId,visitData){const visitIndex=this.visits.findIndex(visit=>visit.id===visitId);if(visitIndex===-1)return false;this.visits[visitIndex]={...this.visits[visitIndex],...visitData,id: visitId};this.updatedAt=getCurrentTimestamp();return true;} removeVisit(visitId){const initialLength=this.visits.length;this.visits=this.visits.filter(visit=>visit.id!==visitId);if(this.visits.length<initialLength){this.updatedAt=getCurrentTimestamp();return true;} return false;} getLatestVisit(){if(this.visits.length===0)return null;return this.visits.reduce((latest,current)=>{const latestDate=new Date(latest.visitDate);const currentDate=new Date(current.visitDate);return currentDate>latestDate ? current : latest;});} getVisitsSortedByDate(){return [...this.visits].sort((a,b)=>new Date(b.visitDate)-new Date(a.visitDate));} validate(){const errors=[];const rules=VALIDATION_RULES.patient;if(!this.firstName||this.firstName.trim()===''){errors.push({field: 'firstName',message: ERROR_MESSAGES.validation.required});} else {if(this.firstName.length<rules.firstName.minLength){errors.push({field: 'firstName',message: ERROR_MESSAGES.validation.minLength.replace('{min}',rules.firstName.minLength)});} if(this.firstName.length>rules.firstName.maxLength){errors.push({field: 'firstName',message: ERROR_MESSAGES.validation.maxLength.replace('{max}',rules.firstName.maxLength)});} if(!rules.firstName.pattern.test(this.firstName)){errors.push({field: 'firstName',message: 'First name can only contain letters,spaces,hyphens,and apostrophes'});}} if(!this.lastName||this.lastName.trim()===''){errors.push({field: 'lastName',message: ERROR_MESSAGES.validation.required});} else {if(this.lastName.length<rules.lastName.minLength){errors.push({field: 'lastName',message: ERROR_MESSAGES.validation.minLength.replace('{min}',rules.lastName.minLength)});} if(this.lastName.length>rules.lastName.maxLength){errors.push({field: 'lastName',message: ERROR_MESSAGES.validation.maxLength.replace('{max}',rules.lastName.maxLength)});} if(!rules.lastName.pattern.test(this.lastName)){errors.push({field: 'lastName',message: 'Last name can only contain letters,spaces,hyphens,and apostrophes'});}} if(!this.dateOfBirth){errors.push({field: 'dateOfBirth',message: ERROR_MESSAGES.validation.required});} else {const birthDate=new Date(this.dateOfBirth);const today=new Date();if(isNaN(birthDate.getTime())){errors.push({field: 'dateOfBirth',message: ERROR_MESSAGES.validation.date});} else if(birthDate>today){errors.push({field: 'dateOfBirth',message: ERROR_MESSAGES.validation.future});}} if(!this.placeOfResidence||this.placeOfResidence.trim()===''){errors.push({field: 'placeOfResidence',message: ERROR_MESSAGES.validation.required});} else {if(this.placeOfResidence.length<rules.placeOfResidence.minLength){errors.push({field: 'placeOfResidence',message: ERROR_MESSAGES.validation.minLength.replace('{min}',rules.placeOfResidence.minLength)});} if(this.placeOfResidence.length>rules.placeOfResidence.maxLength){errors.push({field: 'placeOfResidence',message: ERROR_MESSAGES.validation.maxLength.replace('{max}',rules.placeOfResidence.maxLength)});}} if(!this.gender||this.gender.trim()===''){errors.push({field: 'gender',message: ERROR_MESSAGES.validation.required});} else if(!rules.gender.options.includes(this.gender.toLowerCase())){errors.push({field: 'gender',message: 'Gender must be one of: '+rules.gender.options.join(',')});} this.visits.forEach((visit,index)=>{const visitErrors=this.validateVisit(visit);visitErrors.forEach(error=>{errors.push({field: `visits[${index}].${error.field}`,message: error.message});});});return {isValid: errors.length===0,errors: errors};} validateVisit(visit){const errors=[];if(!visit.visitDate){errors.push({field: 'visitDate',message: ERROR_MESSAGES.validation.required});} else {const visitDate=new Date(visit.visitDate);const today=new Date();if(isNaN(visitDate.getTime())){errors.push({field: 'visitDate',message: ERROR_MESSAGES.validation.date});} else if(visitDate>today){errors.push({field: 'visitDate',message: ERROR_MESSAGES.validation.future});}} if(visit.medications&&visit.medications.length>1000){errors.push({field: 'medications',message: 'Medications field must be no more than 1000 characters'});} if(visit.observations&&visit.observations.length>2000){errors.push({field: 'observations',message: 'Observations field must be no more than 2000 characters'});} if(visit.additionalComments&&visit.additionalComments.length>1000){errors.push({field: 'additionalComments',message: 'Additional comments field must be no more than 1000 characters'});} return errors;} sanitize(){this.firstName=sanitizeHtml(this.firstName).trim();this.lastName=sanitizeHtml(this.lastName).trim();this.placeOfResidence=sanitizeHtml(this.placeOfResidence).trim();this.gender=sanitizeHtml(this.gender).trim().toLowerCase();this.visits.forEach(visit=>{visit.medications=sanitizeHtml(visit.medications);visit.observations=sanitizeHtml(visit.observations);visit.additionalComments=sanitizeHtml(visit.additionalComments);});this.updatedAt=getCurrentTimestamp();} getFullName(){return `${this.firstName}${this.lastName}`.trim();} getDisplayName(){return `${this.getFullName()}(${this.age} years old)`;} matchesSearch(searchTerm){if(!searchTerm)return true;const term=searchTerm.toLowerCase();return(containsSearchTerm(this.firstName,term)||containsSearchTerm(this.lastName,term)||containsSearchTerm(this.getFullName(),term)||containsSearchTerm(this.placeOfResidence,term));} touch(){this.updatedAt=getCurrentTimestamp();} toJSON(){return {id: this.id,firstName: this.firstName,lastName: this.lastName,dateOfBirth: this.dateOfBirth,age: this.age,placeOfResidence: this.placeOfResidence,gender: this.gender,visits: this.visits,createdAt: this.createdAt,updatedAt: this.updatedAt};} static fromJSON(json){const patient=new Patient(json);patient.updateAge();return patient;} static createNew(){return new Patient();}} if(typeof module!=='undefined'&&module.exports){module.exports=Patient;} class Session {constructor(data={}){this.userId=data.userId||'';this.username=data.username||'';this.loginTime=data.loginTime||getCurrentTimestamp();this.lastActivity=data.lastActivity||getCurrentTimestamp();this.isAuthenticated=data.isAuthenticated||false;} isValid(){return this.isAuthenticated&&this.userId&&this.username&&this.loginTime&&this.lastActivity;} updateActivity(){this.lastActivity=getCurrentTimestamp();} getSessionDuration(){return getCurrentTimestamp()-this.loginTime;} getInactivityTime(){return getCurrentTimestamp()-this.lastActivity;} getFormattedSessionDuration(){const duration=this.getSessionDuration();const hours=Math.floor(duration/(1000*60*60));const minutes=Math.floor((duration %(1000*60*60))/(1000*60));if(hours>0){return `${hours} h ${minutes} m`;} else {return `${minutes} m`;}} getFormattedLastActivity(){const inactivity=this.getInactivityTime();const minutes=Math.floor(inactivity/(1000*60));if(minutes<1){return 'Just now';} else if(minutes<60){return `${minutes} minute${minutes>1 ? 's' : ''} ago`;} else {const hours=Math.floor(minutes/60);return `${hours} hour${hours>1 ? 's' : ''} ago`;}} toJSON(){return {userId: this.userId,username: this.username,loginTime: this.loginTime,lastActivity: this.lastActivity,isAuthenticated: this.isAuthenticated};} static fromJSON(json){return new Session(json);} clone(){return new Session(this.toJSON());}} if(typeof module!=='undefined'&&module.exports){module.exports=Session;} class ErrorHandler {constructor(){this.errorLog=[];this.maxLogSize=1000;this.toastContainer=null;this.loadingStates=new Map();this.retryAttempts=new Map();this.maxRetries=3;this.retryDelay=1000;this.errorTypes={NETWORK: 'network',VALIDATION: 'validation',STORAGE: 'storage',AUTHENTICATION: 'authentication',PERMISSION: 'permission',NOT_FOUND: 'not_found',SERVER: 'server',CLIENT: 'client',UNKNOWN: 'unknown'};this.initialize();this.handleError=this.handleError.bind(this);this.showToast=this.showToast.bind(this);this.logError=this.logError.bind(this);} initialize(){this.createToastContainer();this.setupGlobalErrorHandlers();this.setupPromiseRejectionHandler();console.log('ErrorHandler initialized');} createToastContainer(){this.toastContainer=document.getElementById('toast-container');if(!this.toastContainer){this.toastContainer=document.createElement('div');this.toastContainer.id='toast-container';this.toastContainer.className='toast-container';document.body.appendChild(this.toastContainer);}} setupGlobalErrorHandlers(){window.addEventListener('error',(event)=>{this.handleError({type: this.errorTypes.CLIENT,message: event.message,source: event.filename,line: event.lineno,column: event.colno,error: event.error,context: 'Global Error Handler'});});window.addEventListener('error',(event)=>{if(event.target!==window){this.handleError({type: this.errorTypes.NETWORK,message: `Failed to load resource: ${event.target.src||event.target.href}`,source: event.target.tagName,context: 'Resource Loading',element: event.target});}},true);} setupPromiseRejectionHandler(){window.addEventListener('unhandledrejection',(event)=>{this.handleError({type: this.errorTypes.CLIENT,message: 'Unhandled Promise Rejection',error: event.reason,context: 'Promise Rejection Handler'});event.preventDefault();});} handleError(errorInfo){try {const normalizedError=this.normalizeError(errorInfo);this.logError(normalizedError);const severity=this.determineSeverity(normalizedError);this.showUserNotification(normalizedError,severity);this.attemptRecovery(normalizedError);this.reportError(normalizedError);} catch(handlerError){console.error('Error in error handler:',handlerError);this.showToast('An unexpected error occurred','error');}} normalizeError(errorInfo){if(errorInfo instanceof Error){return {type: this.errorTypes.CLIENT,message: errorInfo.message,stack: errorInfo.stack,name: errorInfo.name,timestamp: new Date().toISOString(),context: 'JavaScript Error'};} if(typeof errorInfo==='string'){return {type: this.errorTypes.UNKNOWN,message: errorInfo,timestamp: new Date().toISOString(),context: 'String Error'};} return {type: errorInfo.type||this.errorTypes.UNKNOWN,message: errorInfo.message||'Unknown error occurred',stack: errorInfo.stack||errorInfo.error?.stack,source: errorInfo.source,line: errorInfo.line,column: errorInfo.column,context: errorInfo.context||'Unknown Context',timestamp: new Date().toISOString(),userAgent: navigator.userAgent,url: window.location.href,...errorInfo};} determineSeverity(error){if(error.type===this.errorTypes.AUTHENTICATION||error.type===this.errorTypes.STORAGE||error.message.includes('is not a function')||error.message.includes('Cannot read property')){return 'critical';} if(error.type===this.errorTypes.NETWORK||error.type===this.errorTypes.SERVER||error.type===this.errorTypes.PERMISSION){return 'high';} if(error.type===this.errorTypes.VALIDATION||error.type===this.errorTypes.NOT_FOUND){return 'medium';} return 'low';} showUserNotification(error,severity){let message,type,duration;switch(severity){case 'critical': message=this.getCriticalErrorMessage(error);type='error';duration=0;break;case 'high': message=this.getHighSeverityMessage(error);type='error';duration=8000;break;case 'medium': message=this.getMediumSeverityMessage(error);type='warning';duration=5000;break;case 'low': message=this.getLowSeverityMessage(error);type='info';duration=3000;break;default: message='An unexpected error occurred';type='error';duration=5000;} this.showToast(message,type,duration);} getCriticalErrorMessage(error){switch(error.type){case this.errorTypes.AUTHENTICATION: return 'Authentication failed. Please log in again.';case this.errorTypes.STORAGE: return 'Unable to save data. Please check your storage permissions.';default: return 'A critical error occurred. Please refresh the page and try again.';}} getHighSeverityMessage(error){switch(error.type){case this.errorTypes.NETWORK: return 'Network connection failed. Please check your internet connection.';case this.errorTypes.SERVER: return 'Server error occurred. Please try again in a few moments.';case this.errorTypes.PERMISSION: return 'Permission denied. You may not have access to this resource.';default: return 'An error occurred while processing your request.';}} getMediumSeverityMessage(error){switch(error.type){case this.errorTypes.VALIDATION: return error.message||'Please check your input and try again.';case this.errorTypes.NOT_FOUND: return 'The requested resource was not found.';default: return 'Please try again or contact support if the problem persists.';}} getLowSeverityMessage(error){return error.message||'A minor issue occurred but has been handled.';} showToast(message,type='info',duration=5000){const toast=document.createElement('div');toast.className=`toast toast-${type}`;toast.innerHTML=`<div class="toast-content"><div class="toast-icon">${this.getToastIcon(type)}</div><div class="toast-message">${message}</div><button class="toast-close" aria-label="Close notification">&times;</button></div>`;const closeBtn=toast.querySelector('.toast-close');closeBtn.addEventListener('click',()=>{this.removeToast(toast);});this.toastContainer.appendChild(toast);setTimeout(()=>{toast.classList.add('toast-show');},10);if(duration>0){setTimeout(()=>{this.removeToast(toast);},duration);} this.limitToasts();return toast;} getToastIcon(type){const icons={success: '✓',error: '✗',warning: '⚠',info: 'ℹ'};return icons[type]||icons.info;} removeToast(toast){if(toast&&toast.parentNode){toast.classList.add('toast-hide');setTimeout(()=>{if(toast.parentNode){toast.parentNode.removeChild(toast);}},300);}} limitToasts(){const toasts=this.toastContainer.querySelectorAll('.toast');const maxToasts=5;if(toasts.length>maxToasts){for(let i=0;i<toasts.length-maxToasts;i++){this.removeToast(toasts[i]);}}} showSuccess(message,duration=4000){return this.showToast(message,'success',duration);} showError(message,duration=6000){return this.showToast(message,'error',duration);} showWarning(message,duration=5000){return this.showToast(message,'warning',duration);} showInfo(message,duration=4000){return this.showToast(message,'info',duration);} showLoading(message='Loading...',key='default'){this.hideLoading(key);const loadingToast=this.showToast(`<div class="loading-spinner-small"></div>${message}`,'info',0);loadingToast.classList.add('toast-loading');const loadingState={toast: loadingToast,key: key,startTime: Date.now()};this.loadingStates.set(key,loadingState);return loadingState;} hideLoading(key='default'){const loadingState=this.loadingStates.get(key);if(loadingState){this.removeToast(loadingState.toast);this.loadingStates.delete(key);}} attemptRecovery(error){const recoveryKey=`${error.type}_${error.context}`;const attempts=this.retryAttempts.get(recoveryKey)||0;if(attempts>=this.maxRetries){console.warn(`Max retry attempts reached for ${recoveryKey}`);return;} switch(error.type){case this.errorTypes.NETWORK: this.attemptNetworkRecovery(error,recoveryKey,attempts);break;case this.errorTypes.STORAGE: this.attemptStorageRecovery(error,recoveryKey,attempts);break;case this.errorTypes.AUTHENTICATION: this.attemptAuthRecovery(error,recoveryKey,attempts);break;default: break;}} attemptNetworkRecovery(error,recoveryKey,attempts){const delay=this.retryDelay*Math.pow(2,attempts);setTimeout(()=>{this.retryAttempts.set(recoveryKey,attempts+1);if(error.retryCallback&&typeof error.retryCallback==='function'){error.retryCallback();}},delay);} attemptStorageRecovery(error,recoveryKey,attempts){try {if(typeof window!=='undefined'&&window.app&&window.app.components.dataStorage){window.app.components.dataStorage.clearOldData();} this.showInfo('Attempting to free up storage space...');} catch(recoveryError){console.error('Storage recovery failed:',recoveryError);}} attemptAuthRecovery(error,recoveryKey,attempts){if(typeof window!=='undefined'&&window.app&&window.app.showLoginForm){setTimeout(()=>{window.app.showLoginForm();},2000);}} logError(error){this.errorLog.push(error);if(this.errorLog.length>this.maxLogSize){this.errorLog.shift();} const severity=this.determineSeverity(error);switch(severity){case 'critical': console.error('CRITICAL ERROR:',error);break;case 'high': console.error('HIGH SEVERITY ERROR:',error);break;case 'medium': console.warn('MEDIUM SEVERITY ERROR:',error);break;case 'low': console.info('LOW SEVERITY ERROR:',error);break;default: console.log('ERROR:',error);}} reportError(error){try {const errorReport={...error,sessionId: this.getSessionId(),userId: this.getUserId(),buildVersion: this.getBuildVersion()};const reports=JSON.parse(localStorage.getItem('errorReports')||'[]');reports.push(errorReport);const maxReports=100;if(reports.length>maxReports){reports.splice(0,reports.length-maxReports);} localStorage.setItem('errorReports',JSON.stringify(reports));} catch(reportError){console.error('Failed to report error:',reportError);}} getSessionId(){return sessionStorage.getItem('sessionId')||'unknown';} getUserId(){try {if(typeof window!=='undefined'&&window.app&&window.app.components.authManager){const user=window.app.components.authManager.getCurrentUser();return user?.userId||'anonymous';}} catch(error){} return 'anonymous';} getBuildVersion(){return '1.0.0';} getErrorLog(){return [...this.errorLog];} clearErrorLog(){this.errorLog=[];console.log('Error log cleared');} getErrorStats(){const stats={total: this.errorLog.length,byType:{},bySeverity:{},recent: 0};const oneHourAgo=new Date(Date.now()-60*60*1000).toISOString();this.errorLog.forEach(error=>{stats.byType[error.type]=(stats.byType[error.type]||0)+1;const severity=this.determineSeverity(error);stats.bySeverity[severity]=(stats.bySeverity[severity]||0)+1;if(error.timestamp>oneHourAgo){stats.recent++;}});return stats;} clearAllToasts(){const toasts=this.toastContainer.querySelectorAll('.toast');toasts.forEach(toast=>this.removeToast(toast));} destroy(){this.clearAllToasts();this.loadingStates.clear();this.retryAttempts.clear();if(this.toastContainer&&this.toastContainer.parentNode){this.toastContainer.parentNode.removeChild(this.toastContainer);} console.log('ErrorHandler destroyed');}} if(typeof module!=='undefined'&&module.exports){module.exports=ErrorHandler;} class ChangeTracker {constructor(){this.trackedForms=new Map();this.trackedComponents=new Map();this.globalChangeListeners=new Set();this.isEnabled=true;this.trackForm=this.trackForm.bind(this);this.untrackForm=this.untrackForm.bind(this);this.hasUnsavedChanges=this.hasUnsavedChanges.bind(this);this.getUnsavedChangesDetails=this.getUnsavedChangesDetails.bind(this);} setEnabled(enabled){this.isEnabled=enabled;if(!enabled){this.clearAllTracking();}} trackForm(formId,options={}){if(!this.isEnabled)return;const formElement=document.getElementById(formId);if(!formElement){console.warn(`Form with ID ${formId} not found`);return;} const trackingInfo={formId,formElement,originalData: this.getFormData(formElement),hasChanges: false,displayName: options.displayName||formId,description: options.description||`Form: ${formId}`,onChangeCallback: options.onChangeCallback,lastModified: null,changeCount: 0};this.trackedForms.set(formId,trackingInfo);this.setupFormEventListeners(trackingInfo);console.log(`Started tracking form: ${formId}`);} untrackForm(formId){const trackingInfo=this.trackedForms.get(formId);if(!trackingInfo)return;this.removeFormEventListeners(trackingInfo);this.trackedForms.delete(formId);console.log(`Stopped tracking form: ${formId}`);} trackComponent(componentId,options={}){if(!this.isEnabled)return;const trackingInfo={componentId,hasChanges: false,displayName: options.displayName||componentId,description: options.description||`Component: ${componentId}`,checkChangesCallback: options.checkChangesCallback,getDataCallback: options.getDataCallback,lastModified: null,changeCount: 0};this.trackedComponents.set(componentId,trackingInfo);console.log(`Started tracking component: ${componentId}`);} untrackComponent(componentId){this.trackedComponents.delete(componentId);console.log(`Stopped tracking component: ${componentId}`);} markFormChanged(formId,hasChanges=true){const trackingInfo=this.trackedForms.get(formId);if(!trackingInfo)return;const previousState=trackingInfo.hasChanges;trackingInfo.hasChanges=hasChanges;trackingInfo.lastModified=hasChanges ? new Date(): null;if(hasChanges){trackingInfo.changeCount++;} if(previousState!==hasChanges){this.notifyChangeListeners();}} markComponentChanged(componentId,hasChanges=true){const trackingInfo=this.trackedComponents.get(componentId);if(!trackingInfo)return;const previousState=trackingInfo.hasChanges;trackingInfo.hasChanges=hasChanges;trackingInfo.lastModified=hasChanges ? new Date(): null;if(hasChanges){trackingInfo.changeCount++;} if(previousState!==hasChanges){this.notifyChangeListeners();}} hasUnsavedChanges(){if(!this.isEnabled)return false;for(const [formId,trackingInfo] of this.trackedForms){if(this.checkFormChanges(trackingInfo)){return true;}} for(const [componentId,trackingInfo] of this.trackedComponents){if(this.checkComponentChanges(trackingInfo)){return true;}} return false;} getUnsavedChangesDetails(){const details={hasChanges: false,forms: [],components: [],totalChanges: 0,descriptions: []};for(const [formId,trackingInfo] of this.trackedForms){if(this.checkFormChanges(trackingInfo)){details.hasChanges=true;details.forms.push({id: formId,displayName: trackingInfo.displayName,description: trackingInfo.description,lastModified: trackingInfo.lastModified,changeCount: trackingInfo.changeCount});details.descriptions.push(trackingInfo.displayName);details.totalChanges+=trackingInfo.changeCount;}} for(const [componentId,trackingInfo] of this.trackedComponents){if(this.checkComponentChanges(trackingInfo)){details.hasChanges=true;details.components.push({id: componentId,displayName: trackingInfo.displayName,description: trackingInfo.description,lastModified: trackingInfo.lastModified,changeCount: trackingInfo.changeCount});details.descriptions.push(trackingInfo.displayName);details.totalChanges+=trackingInfo.changeCount;}} return details;} markAllAsSaved(){for(const [formId,trackingInfo] of this.trackedForms){trackingInfo.hasChanges=false;trackingInfo.originalData=this.getFormData(trackingInfo.formElement);trackingInfo.lastModified=null;trackingInfo.changeCount=0;} for(const [componentId,trackingInfo] of this.trackedComponents){trackingInfo.hasChanges=false;trackingInfo.lastModified=null;trackingInfo.changeCount=0;} this.notifyChangeListeners();} markFormAsSaved(formId){const trackingInfo=this.trackedForms.get(formId);if(!trackingInfo)return;trackingInfo.hasChanges=false;trackingInfo.originalData=this.getFormData(trackingInfo.formElement);trackingInfo.lastModified=null;trackingInfo.changeCount=0;this.notifyChangeListeners();} markComponentAsSaved(componentId){const trackingInfo=this.trackedComponents.get(componentId);if(!trackingInfo)return;trackingInfo.hasChanges=false;trackingInfo.lastModified=null;trackingInfo.changeCount=0;this.notifyChangeListeners();} addChangeListener(callback){this.globalChangeListeners.add(callback);} removeChangeListener(callback){this.globalChangeListeners.delete(callback);} clearAllTracking(){for(const [formId,trackingInfo] of this.trackedForms){this.removeFormEventListeners(trackingInfo);} this.trackedForms.clear();this.trackedComponents.clear();this.notifyChangeListeners();} setupFormEventListeners(trackingInfo){const {formElement}=trackingInfo;const changeHandler=()=>{this.handleFormChange(trackingInfo);};trackingInfo.changeHandler=changeHandler;const events=['input','change','keyup','paste'];events.forEach(eventType=>{formElement.addEventListener(eventType,changeHandler);});trackingInfo.eventTypes=events;} removeFormEventListeners(trackingInfo){const {formElement,changeHandler,eventTypes}=trackingInfo;if(changeHandler&&eventTypes){eventTypes.forEach(eventType=>{formElement.removeEventListener(eventType,changeHandler);});}} handleFormChange(trackingInfo){if(trackingInfo.changeTimeout){clearTimeout(trackingInfo.changeTimeout);} trackingInfo.changeTimeout=setTimeout(()=>{const hasChanges=this.checkFormChanges(trackingInfo);const previousState=trackingInfo.hasChanges;trackingInfo.hasChanges=hasChanges;if(hasChanges){trackingInfo.lastModified=new Date();trackingInfo.changeCount++;} if(trackingInfo.onChangeCallback){trackingInfo.onChangeCallback(hasChanges,trackingInfo);} if(previousState!==hasChanges){this.notifyChangeListeners();}},300);} checkFormChanges(trackingInfo){const currentData=this.getFormData(trackingInfo.formElement);return!this.isEqual(currentData,trackingInfo.originalData);} checkComponentChanges(trackingInfo){if(trackingInfo.checkChangesCallback){return trackingInfo.checkChangesCallback();} return trackingInfo.hasChanges;} getFormData(formElement){const formData=new FormData(formElement);const data={};for(const [key,value] of formData.entries()){if(key.includes('[')){const match=key.match(/(\w+)\[(\d+)\]\[(\w+)\]/);if(match){const [,arrayName,index,fieldName]=match;if(!data[arrayName])data[arrayName]=[];if(!data[arrayName][index])data[arrayName][index]={};data[arrayName][index][fieldName]=value;}} else {data[key]=value;}} return data;} isEqual(obj1,obj2){if(obj1===obj2)return true;if(obj1==null||obj2==null)return false;if(typeof obj1!==typeof obj2)return false;if(typeof obj1==='object'){const keys1=Object.keys(obj1);const keys2=Object.keys(obj2);if(keys1.length!==keys2.length)return false;for(const key of keys1){if(!keys2.includes(key))return false;if(!this.isEqual(obj1[key],obj2[key]))return false;} return true;} return obj1===obj2;} notifyChangeListeners(){const hasChanges=this.hasUnsavedChanges();const details=this.getUnsavedChangesDetails();this.globalChangeListeners.forEach(callback=>{try {callback(hasChanges,details);} catch(error){console.error('Error in change listener:',error);}});} getTrackingStats(){return {isEnabled: this.isEnabled,trackedFormsCount: this.trackedForms.size,trackedComponentsCount: this.trackedComponents.size,hasUnsavedChanges: this.hasUnsavedChanges(),totalChangeListeners: this.globalChangeListeners.size,trackedForms: Array.from(this.trackedForms.keys()),trackedComponents: Array.from(this.trackedComponents.keys())};}} if(typeof module!=='undefined'&&module.exports){module.exports=ChangeTracker;} class ModalManager {constructor(){this.activeModals=new Map();this.modalContainer=null;this.initialize();} initialize(){this.modalContainer=document.getElementById('modal-container');if(!this.modalContainer){this.modalContainer=document.createElement('div');this.modalContainer.id='modal-container';this.modalContainer.className='modal-container hidden';document.body.appendChild(this.modalContainer);} this.setupEventListeners();} setupEventListeners(){this.modalContainer.addEventListener('click',(event)=>{if(event.target===this.modalContainer){this.closeTopModal();}});document.addEventListener('keydown',(event)=>{if(event.key==='Escape'&&this.activeModals.size>0){this.closeTopModal();}});} showLogoutConfirmation(options={}){const modalId='logout-confirmation';return new Promise((resolve)=>{const modalHtml=`<div class="modal-backdrop"><div class="modal-dialog logout-confirmation-modal"><div class="modal-header"><h3 class="modal-title">Unsaved Changes Detected</h3></div><div class="modal-body"><div class="modal-icon warning"><svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/><line x1="12" y1="9" x2="12" y2="13"/><line x1="12" y1="17" x2="12.01" y2="17"/></svg></div><p class="modal-message">You have unsaved changes that will be lost if you logout now. What would you like to do?</p>${options.changesDetails ? `<div class="changes-details"><p><strong>Unsaved changes in:</strong></p><ul>${options.changesDetails.map(detail=>`<li>${detail}</li>`).join('')}</ul></div>` : ''}</div><div class="modal-actions"><button type="button" class="btn btn-primary save-and-exit-btn" data-action="save-and-exit"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/><polyline points="17,21 17,13 7,13 7,21"/><polyline points="7,3 7,8 15,8"/></svg>Save and Exit</button><button type="button" class="btn btn-danger exit-without-saving-btn" data-action="exit-without-saving"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16,17 21,12 16,7"/><line x1="21" y1="12" x2="9" y2="12"/></svg>Exit Without Saving</button><button type="button" class="btn btn-secondary cancel-btn" data-action="cancel"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>Cancel</button></div></div></div>`;this.showModal(modalId,modalHtml,{closable: false,onAction:(action)=>{this.closeModal(modalId);resolve(action);}});});} showNavigationConfirmation(options={}){const modalId='navigation-confirmation';return new Promise((resolve)=>{const modalHtml=`<div class="modal-backdrop"><div class="modal-dialog navigation-confirmation-modal"><div class="modal-header"><h3 class="modal-title">Unsaved Changes</h3></div><div class="modal-body"><div class="modal-icon warning"><svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/><line x1="12" y1="9" x2="12" y2="13"/><line x1="12" y1="17" x2="12.01" y2="17"/></svg></div><p class="modal-message">You have unsaved changes that will be lost if you navigate away. What would you like to do?</p>${options.changesDetails ? `<div class="changes-details"><p><strong>Unsaved changes in:</strong></p><ul>${options.changesDetails.descriptions ? options.changesDetails.descriptions.map(detail=>`<li>${detail}</li>`).join(''): '<li>Form data</li>'}</ul></div>` : ''}</div><div class="modal-actions"><button type="button" class="btn btn-primary save-and-continue-btn" data-action="save-and-continue"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/><polyline points="17,21 17,13 7,13 7,21"/><polyline points="7,3 7,8 15,8"/></svg>Save and Continue</button><button type="button" class="btn btn-danger continue-without-saving-btn" data-action="continue-without-saving"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16,17 21,12 16,7"/><line x1="21" y1="12" x2="9" y2="12"/></svg>Continue Without Saving</button><button type="button" class="btn btn-secondary cancel-btn" data-action="cancel"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>Cancel</button></div></div></div>`;this.showModal(modalId,modalHtml,{closable: false,onAction:(action)=>{this.closeModal(modalId);resolve(action);}});});} showConfirmation(options={}){const modalId=options.id||'confirmation-modal';const title=options.title||'Confirm Action';const message=options.message||'Are you sure you want to proceed?';const confirmText=options.confirmText||'Confirm';const cancelText=options.cancelText||'Cancel';const type=options.type||'info';return new Promise((resolve)=>{const modalHtml=`<div class="modal-backdrop"><div class="modal-dialog confirmation-modal"><div class="modal-header"><h3 class="modal-title">${title}</h3></div><div class="modal-body"><div class="modal-icon ${type}">${this.getIconSvg(type)}</div><p class="modal-message">${message}</p></div><div class="modal-actions"><button type="button" class="btn btn-primary confirm-btn" data-action="confirm">${confirmText}</button><button type="button" class="btn btn-secondary cancel-btn" data-action="cancel">${cancelText}</button></div></div></div>`;this.showModal(modalId,modalHtml,{closable: true,onAction:(action)=>{this.closeModal(modalId);resolve(action==='confirm');}});});} showModal(modalId,html,options={}){if(this.activeModals.has(modalId)){this.closeModal(modalId);} const modalElement=document.createElement('div');modalElement.className='modal';modalElement.dataset.modalId=modalId;modalElement.innerHTML=html;this.activeModals.set(modalId,{element: modalElement,options: options});this.modalContainer.appendChild(modalElement);this.modalContainer.classList.remove('hidden');if(options.onAction){modalElement.addEventListener('click',(event)=>{const action=event.target.dataset.action;if(action){event.preventDefault();event.stopPropagation();options.onAction(action);}});} setTimeout(()=>{const firstButton=modalElement.querySelector('button');if(firstButton){firstButton.focus();}},100);setTimeout(()=>{modalElement.classList.add('modal-show');},10);} closeModal(modalId){const modal=this.activeModals.get(modalId);if(!modal)return;modal.element.classList.add('modal-hide');setTimeout(()=>{if(modal.element.parentNode){modal.element.parentNode.removeChild(modal.element);} this.activeModals.delete(modalId);if(this.activeModals.size===0){this.modalContainer.classList.add('hidden');}},200);} closeTopModal(){if(this.activeModals.size===0)return;const modalIds=Array.from(this.activeModals.keys());const topModalId=modalIds[modalIds.length-1];const topModal=this.activeModals.get(topModalId);if(topModal.options.closable!==false){this.closeModal(topModalId);}} closeAllModals(){const modalIds=Array.from(this.activeModals.keys());modalIds.forEach(modalId=>this.closeModal(modalId));} getIconSvg(type){const icons={info: `<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><line x1="12" y1="16" x2="12" y2="12"/><line x1="12" y1="8" x2="12.01" y2="8"/></svg>`,warning: `<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/><line x1="12" y1="9" x2="12" y2="13"/><line x1="12" y1="17" x2="12.01" y2="17"/></svg>`,danger: `<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/></svg>`,success: `<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22,4 12,14.01 9,11.01"/></svg>`};return icons[type]||icons.info;} hasOpenModals(){return this.activeModals.size>0;} getOpenModalCount(){return this.activeModals.size;}} if(typeof module!=='undefined'&&module.exports){module.exports=ModalManager;} class LogoManager {constructor(){this.logoFormats=['svg','png','jpg','jpeg'];this.logoSizes={small:{maxHeight: '40px',maxWidth: '120px'},medium:{maxHeight: '60px',maxWidth: '180px'},large:{maxHeight: '80px',maxWidth: '240px'},xlarge:{maxHeight: '120px',maxWidth: '360px'}};this.fallbackText='Dr. S. Sahboub';this.fallbackSubtext='Pulmonology Practice';this.logoCache=new Map();this.loadAttempts=new Map();this.maxRetries=3;this.createLogo=this.createLogo.bind(this);this.loadLogo=this.loadLogo.bind(this);this.handleLogoError=this.handleLogoError.bind(this);} createLogo(options={}){const {size='medium',showSubtext=false,className='',id='',alt='Dr. S. Sahboub Logo',priority=['svg'],container='div',onClick=null,ariaLabel='Dr. S. Sahboub Pulmonology Practice Logo'}=options;const logoContainer=document.createElement(container);logoContainer.className=`logo-container ${className}`.trim();if(id)logoContainer.id=id;logoContainer.setAttribute('role','img');logoContainer.setAttribute('aria-label',ariaLabel);if(onClick&&typeof onClick==='function'){logoContainer.style.cursor='pointer';logoContainer.addEventListener('click',onClick);logoContainer.setAttribute('tabindex','0');logoContainer.addEventListener('keydown',(e)=>{if(e.key==='Enter'||e.key===' '){e.preventDefault();onClick(e);}});} const logoImg=document.createElement('img');logoImg.className=`logo logo-${size}`;logoImg.alt=alt;logoImg.style.display='block';const sizeConfig=this.logoSizes[size]||this.logoSizes.medium;logoImg.style.maxHeight=sizeConfig.maxHeight;logoImg.style.maxWidth=sizeConfig.maxWidth;logoImg.style.height='auto';logoImg.style.width='auto';const logoText=document.createElement('h1');logoText.className=`logo-text logo-text-${size}`;logoText.textContent=this.fallbackText;logoText.style.display='none';logoText.style.margin='0';const logoSubtext=document.createElement('p');logoSubtext.className=`logo-subtext logo-subtext-${size}`;logoSubtext.textContent=this.fallbackSubtext;logoSubtext.style.display='none';logoSubtext.style.margin='0';logoSubtext.style.fontSize='0.8em';logoSubtext.style.opacity='0.7';logoImg.addEventListener('error',()=>{this.handleLogoError(logoImg,logoText,logoSubtext,showSubtext,priority);});logoImg.addEventListener('load',()=>{console.log(`Logo loaded successfully: ${logoImg.src}`);logoImg.style.display='block';logoText.style.display='none';logoSubtext.style.display='none';});logoContainer.appendChild(logoImg);logoContainer.appendChild(logoText);if(showSubtext){logoContainer.appendChild(logoSubtext);} const safePriority=priority.filter(format=>format==='svg'||this.logoCache.has(format));if(safePriority.length===0){safePriority.push('svg');} this.loadLogo(logoImg,safePriority);return logoContainer;} async loadLogo(imgElement,formatPriority=['svg','png']){for(const format of formatPriority){if(this.logoCache.has(format)){const cachedSrc=this.logoCache.get(format);if(cachedSrc){imgElement.src=cachedSrc;console.log(`Logo loaded from cache: ${cachedSrc}`);return;}}} for(const format of formatPriority){const logoPath=`assets/logo.${format}`;try {const exists=await this.checkFileExists(logoPath);if(exists){imgElement.src=logoPath;this.logoCache.set(format,logoPath);console.log(`Logo loaded: ${logoPath}`);return;}} catch(error){console.warn(`Failed to check logo format ${format}:`,error);continue;}} console.warn(`No logo formats available from: ${formatPriority.join(',')}`);imgElement.dispatchEvent(new Event('error'));} checkFileExists(url){return new Promise((resolve)=>{const img=new Image();img.onload=()=>{resolve(true);};img.onerror=()=>{resolve(false);};try {img.src=url;} catch(error){resolve(false);}});} handleLogoError(imgElement,textElement,subtextElement,showSubtext,formatPriority){const attemptKey=formatPriority.join('-');const attempts=this.loadAttempts.get(attemptKey)||0;if(attempts<this.maxRetries){this.loadAttempts.set(attemptKey,attempts+1);console.warn(`Logo load failed,retrying...(attempt ${attempts+1}/${this.maxRetries})`);setTimeout(()=>{this.loadLogo(imgElement,formatPriority);},1000*(attempts+1));return;} console.warn('Logo loading failed after max retries,showing text fallback');imgElement.style.display='none';textElement.style.display='block';if(showSubtext){subtextElement.style.display='block';} this.applyFallbackStyling(textElement,subtextElement);} applyFallbackStyling(textElement,subtextElement){textElement.style.fontFamily='Arial,sans-serif';textElement.style.fontWeight='bold';textElement.style.color='var(--primary-color,#2c5aa0)';textElement.style.textShadow='0 1px 2px rgba(0,0,0,0.1)';textElement.style.lineHeight='1.2';if(subtextElement){subtextElement.style.fontFamily='Arial,sans-serif';subtextElement.style.fontWeight='normal';subtextElement.style.color='var(--text-secondary,#6c757d)';subtextElement.style.fontSize='0.75em';subtextElement.style.fontStyle='italic';subtextElement.style.marginTop='0.25em';}} createLoginLogo(options={}){return this.createLogo({size: 'large',showSubtext: true,className: 'login-logo',alt: 'Dr. S. Sahboub Pulmonology Practice',ariaLabel: 'Dr. S. Sahboub Pulmonology Practice-Login',...options});} createHeaderLogo(options={}){return this.createLogo({size: 'medium',showSubtext: false,className: 'header-logo',alt: 'Dr. S. Sahboub Logo',ariaLabel: 'Dr. S. Sahboub Pulmonology Practice',onClick: options.onClick,...options});} createSmallLogo(options={}){return this.createLogo({size: 'small',showSubtext: false,className: 'small-logo',alt: 'Dr. S. Sahboub',ariaLabel: 'Dr. S. Sahboub',...options});} updateAllLogos(newLogoPath){const logoImages=document.querySelectorAll('.logo');logoImages.forEach(img=>{if(img.tagName==='IMG'){img.src=newLogoPath;}});this.logoCache.clear();this.loadAttempts.clear();} getLogoStatus(){return {cacheSize: this.logoCache.size,cachedLogos: Array.from(this.logoCache.entries()),loadAttempts: Array.from(this.loadAttempts.entries()),supportedFormats: this.logoFormats,availableSizes: Object.keys(this.logoSizes),fallbackText: this.fallbackText,fallbackSubtext: this.fallbackSubtext};} async preloadLogos(formats=['svg','png']){console.log('Preloading logos...');const preloadPromises=formats.map(format=>{const logoPath=`assets/logo.${format}`;return this.checkFileExists(logoPath).then(exists=>{if(exists){this.logoCache.set(format,logoPath);console.log(`Preloaded logo: ${logoPath}`);} else {console.log(`Logo format ${format} not available: ${logoPath}`);} return {format,exists,path: logoPath};}).catch(error=>{console.warn(`Error checking logo format ${format}:`,error);return {format,exists: false,path: logoPath,error: error.message};});});const results=await Promise.all(preloadPromises);const availableFormats=results.filter(r=>r.exists).map(r=>r.format);console.log(`Logo preload complete. Available formats: ${availableFormats.join(',')}`);return results;} async detectAvailableFormats(){console.log('Detecting available logo formats...');const results=await this.preloadLogos(this.logoFormats);return results.filter(r=>r.exists).map(r=>r.format);} clearCache(){this.logoCache.clear();this.loadAttempts.clear();console.log('Logo cache cleared');} setFallbackText(text,subtext=''){this.fallbackText=text;this.fallbackSubtext=subtext;}} if(typeof module!=='undefined'&&module.exports){module.exports=LogoManager;} class DataStorageManager {constructor(){this.isInitialized=false;this.storageType='localStorage';this.dataDirectory=STORAGE_CONFIG.dataDirectory;this.backupDirectory=STORAGE_CONFIG.backupDirectory;this.patientsIndex=new Map();this.errorHandler=null;} async initializeStorage(){try {log('Initializing data storage system...','info');if('showDirectoryPicker' in window){this.storageType='fileSystem';log('File System Access API available-using file system storage','info');} else {this.storageType='localStorage';log('File System Access API not available-using localStorage fallback','info');} if(this.storageType==='localStorage'){await this.initializeLocalStorage();} else {await this.initializeFileSystem();} await this.loadPatientsIndex();this.isInitialized=true;log('Data storage system initialized successfully','info');return {success: true,storageType: this.storageType,patientsCount: this.patientsIndex.size};} catch(error){log(`Failed to initialize storage: ${error.message}`,'error');throw new Error(`Storage initialization failed: ${error.message}`);}} async initializeLocalStorage(){try {if(!window.localStorage){throw new Error('localStorage is not available');} if(!localStorage.getItem('pms_patients')){localStorage.setItem('pms_patients',JSON.stringify({}));} if(!localStorage.getItem('pms_patients_index')){localStorage.setItem('pms_patients_index',JSON.stringify([]));} if(!localStorage.getItem('pms_config')){localStorage.setItem('pms_config',JSON.stringify({version: '1.0.0',createdAt: getCurrentTimestamp(),lastBackup: null}));} log('localStorage storage initialized','info');} catch(error){throw new Error(`localStorage initialization failed: ${error.message}`);}} async initializeFileSystem(){try {await this.initializeLocalStorage();log('File system storage initialized(using localStorage backend)','info');} catch(error){throw new Error(`File system initialization failed: ${error.message}`);}} async loadPatientsIndex(){try {const indexData=localStorage.getItem('pms_patients_index');if(indexData){const index=JSON.parse(indexData);this.patientsIndex.clear();index.forEach(patient=>{this.patientsIndex.set(patient.id,{id: patient.id,firstName: patient.firstName,lastName: patient.lastName,fullName: `${patient.firstName}${patient.lastName}`,age: patient.age,gender: patient.gender,placeOfResidence: patient.placeOfResidence,lastVisitDate: patient.lastVisitDate,createdAt: patient.createdAt,updatedAt: patient.updatedAt});});} log(`Loaded ${this.patientsIndex.size} patients into index`,'info');} catch(error){log(`Failed to load patients index: ${error.message}`,'error');this.patientsIndex.clear();}} async savePatientsIndex(){try {const indexArray=Array.from(this.patientsIndex.values());localStorage.setItem('pms_patients_index',JSON.stringify(indexArray));log('Patients index saved successfully','info');} catch(error){log(`Failed to save patients index: ${error.message}`,'error');throw new Error(`Failed to save patients index: ${error.message}`);}} async savePatient(patientData){try {if(!this.isInitialized){throw new Error('Storage not initialized');} if(!patientData||!patientData.id){throw new Error('Invalid patient data: missing ID');} const patient=new Patient(patientData);const validation=patient.validate();if(!validation.isValid){throw new Error(`Patient validation failed: ${validation.errors.map(e=>e.message).join(',')}`);} patient.sanitize();patient.touch();const patients=JSON.parse(localStorage.getItem('pms_patients')||'{}');patients[patient.id]=patient.toJSON();localStorage.setItem('pms_patients',JSON.stringify(patients));const lastVisit=patient.getLatestVisit();this.patientsIndex.set(patient.id,{id: patient.id,firstName: patient.firstName,lastName: patient.lastName,fullName: patient.getFullName(),age: patient.age,gender: patient.gender,placeOfResidence: patient.placeOfResidence,lastVisitDate: lastVisit ? lastVisit.visitDate : null,createdAt: patient.createdAt,updatedAt: patient.updatedAt});await this.savePatientsIndex();log(`Patient ${patient.getFullName()} saved successfully`,'info');return {success: true,patientId: patient.id,message: SUCCESS_MESSAGES.patient.created};} catch(error){log(`Failed to save patient: ${error.message}`,'error');throw new Error(`Failed to save patient: ${error.message}`);}} async loadPatient(patientId){try {if(!this.isInitialized){throw new Error('Storage not initialized');} if(!patientId){throw new Error('Patient ID is required');} const patients=JSON.parse(localStorage.getItem('pms_patients')||'{}');const patientData=patients[patientId];if(!patientData){log(`Patient with ID ${patientId} not found`,'info');return null;} const patient=Patient.fromJSON(patientData);log(`Patient ${patient.getFullName()} loaded successfully`,'info');return patient;} catch(error){log(`Failed to load patient ${patientId}: ${error.message}`,'error');throw new Error(`Failed to load patient: ${error.message}`);}} async deletePatient(patientId){try {if(!this.isInitialized){throw new Error('Storage not initialized');} if(!patientId){throw new Error('Patient ID is required');} const patients=JSON.parse(localStorage.getItem('pms_patients')||'{}');if(!patients[patientId]){throw new Error('Patient not found');} const patientName=this.patientsIndex.get(patientId)?.fullName||'Unknown';delete patients[patientId];localStorage.setItem('pms_patients',JSON.stringify(patients));this.patientsIndex.delete(patientId);await this.savePatientsIndex();log(`Patient ${patientName} deleted successfully`,'info');return {success: true,patientId: patientId,message: SUCCESS_MESSAGES.patient.deleted};} catch(error){log(`Failed to delete patient ${patientId}: ${error.message}`,'error');throw new Error(`Failed to delete patient: ${error.message}`);}} async searchPatients(criteria){try {if(!this.isInitialized){throw new Error('Storage not initialized');} const startTime=performance.now();let results=Array.from(this.patientsIndex.values());if(criteria.searchTerm){const term=normalizeForSearch(criteria.searchTerm);if(results.length>1000){results=this.optimizedTextSearch(results,term);} else {results=results.filter(patient=>{return(normalizeForSearch(patient.firstName).includes(term)||normalizeForSearch(patient.lastName).includes(term)||normalizeForSearch(patient.fullName).includes(term)||normalizeForSearch(patient.placeOfResidence).includes(term));});}} if(criteria.gender){const targetGender=criteria.gender.toLowerCase();results=results.filter(patient=>patient.gender?.toLowerCase()===targetGender);} if(criteria.ageRange){const {min,max}=criteria.ageRange;results=results.filter(patient=>{const age=patient.age;return(!min||age>=min)&&(!max||age<=max);});} if(criteria.placeOfResidence){const place=normalizeForSearch(criteria.placeOfResidence);results=results.filter(patient=>normalizeForSearch(patient.placeOfResidence).includes(place));} if(criteria.searchTerm){results=this.sortByRelevance(results,normalizeForSearch(criteria.searchTerm));} else {results.sort(this.comparePatients);} if(criteria.limit){const start=criteria.offset||0;results=results.slice(start,start+criteria.limit);} const searchTime=performance.now()-startTime;log(`Optimized search completed in ${searchTime.toFixed(2)} ms: ${results.length} patients found`,'info');return results;} catch(error){log(`Search failed: ${error.message}`,'error');throw new Error(`Search failed: ${error.message}`);}} optimizedTextSearch(patients,term){const results=[];const termLength=term.length;const searchFields=['firstName','lastName','fullName','placeOfResidence'];for(let i=0;i<patients.length;i++){const patient=patients[i];let found=false;for(let j=0;j<searchFields.length&&!found;j++){const fieldValue=patient[searchFields[j]];if(fieldValue){const normalizedValue=normalizeForSearch(fieldValue);if(normalizedValue.includes(term)){found=true;}}} if(found){results.push(patient);}} return results;} sortByRelevance(results,term){const scoredResults=results.map(patient=>({patient,score: this.calculateRelevanceScore(patient,term)}));scoredResults.sort((a,b)=>{if(a.score!==b.score){return b.score-a.score;} return a.patient.fullName.localeCompare(b.patient.fullName);});return scoredResults.map(item=>item.patient);} calculateRelevanceScore(patient,term){let score=0;if(normalizeForSearch(patient.fullName)===term)score+=100;if(normalizeForSearch(patient.firstName)===term)score+=80;if(normalizeForSearch(patient.lastName)===term)score+=80;if(normalizeForSearch(patient.fullName).startsWith(term))score+=60;if(normalizeForSearch(patient.firstName).startsWith(term))score+=50;if(normalizeForSearch(patient.lastName).startsWith(term))score+=50;if(normalizeForSearch(patient.fullName).includes(term))score+=40;if(normalizeForSearch(patient.placeOfResidence).includes(term))score+=20;return score;} comparePatients(a,b){const lastNameCompare=a.lastName.localeCompare(b.lastName);if(lastNameCompare!==0)return lastNameCompare;return a.firstName.localeCompare(b.firstName);} async getAllPatients(options={}){try {const {limit,offset,loadFull=false,batchSize=50}=options;if(loadFull&&limit){return await this.getBatchedPatients(limit,offset,batchSize);} return await this.searchPatients({limit: options.limit,offset: options.offset});} catch(error){log(`Failed to get all patients: ${error.message}`,'error');throw new Error(`Failed to get all patients: ${error.message}`);}} async getBatchedPatients(limit,offset=0,batchSize=50){try {const allResults=[];let currentOffset=offset;let remainingItems=limit;while(remainingItems>0&&allResults.length<limit){const currentBatchSize=Math.min(batchSize,remainingItems);const batchResults=await this.searchPatients({limit: currentBatchSize,offset: currentOffset});if(batchResults.length===0){break;} allResults.push(...batchResults);currentOffset+=currentBatchSize;remainingItems-=batchResults.length;if(remainingItems>0){await new Promise(resolve=>setTimeout(resolve,1));}} log(`Loaded ${allResults.length} patients in batches`,'info');return allResults;} catch(error){log(`Batch loading failed: ${error.message}`,'error');throw error;}} async preloadPatients(patientIds){try {const preloadedPatients=new Map();const batchSize=10;for(let i=0;i<patientIds.length;i+=batchSize){const batch=patientIds.slice(i,i+batchSize);const batchPromises=batch.map(async(patientId)=>{try {const patient=await this.loadPatient(patientId);if(patient){preloadedPatients.set(patientId,patient);}} catch(error){log(`Failed to preload patient ${patientId}: ${error.message}`,'warn');}});await Promise.all(batchPromises);if(i+batchSize<patientIds.length){await new Promise(resolve=>setTimeout(resolve,5));}} log(`Preloaded ${preloadedPatients.size} patients`,'info');return preloadedPatients;} catch(error){log(`Preloading failed: ${error.message}`,'error');throw error;}} async getStatistics(){try {if(!this.isInitialized){throw new Error('Storage not initialized');} const patients=Array.from(this.patientsIndex.values());const totalPatients=patients.length;const genderStats=patients.reduce((acc,patient)=>{const gender=patient.gender||'unknown';acc[gender]=(acc[gender]||0)+1;return acc;},{});const ageRanges={'0-18': 0,'19-35': 0,'36-50': 0,'51-65': 0,'66+': 0};patients.forEach(patient=>{const age=patient.age;if(age<=18)ageRanges['0-18']++;else if(age<=35)ageRanges['19-35']++;else if(age<=50)ageRanges['36-50']++;else if(age<=65)ageRanges['51-65']++;else ageRanges['66+']++;});const thirtyDaysAgo=Date.now()-(30*24*60*60*1000);const recentPatients=patients.filter(patient=>patient.updatedAt>thirtyDaysAgo).length;return {totalPatients,genderDistribution: genderStats,ageDistribution: ageRanges,recentActivity: recentPatients,storageType: this.storageType};} catch(error){log(`Failed to get statistics: ${error.message}`,'error');throw new Error(`Failed to get statistics: ${error.message}`);}} async createBackup(){try {if(!this.isInitialized){throw new Error('Storage not initialized');} const timestamp=getCurrentTimestamp();const backupData={version: '1.0.0',createdAt: timestamp,patients: JSON.parse(localStorage.getItem('pms_patients')||'{}'),index: JSON.parse(localStorage.getItem('pms_patients_index')||'[]'),config: JSON.parse(localStorage.getItem('pms_config')||'{}')};const backupKey=`pms_backup_${timestamp}`;localStorage.setItem(backupKey,JSON.stringify(backupData));const config=JSON.parse(localStorage.getItem('pms_config')||'{}');config.lastBackup=timestamp;localStorage.setItem('pms_config',JSON.stringify(config));await this.cleanupOldBackups();log('Backup created successfully','info');return {success: true,backupId: backupKey,timestamp: timestamp,patientsCount: Object.keys(backupData.patients).length,message: 'Backup created successfully'};} catch(error){log(`Backup failed: ${error.message}`,'error');throw new Error(`Backup failed: ${error.message}`);}} async restoreFromBackup(backupId){try {if(!this.isInitialized){throw new Error('Storage not initialized');} const backupData=localStorage.getItem(backupId);if(!backupData){throw new Error('Backup not found');} const backup=JSON.parse(backupData);localStorage.setItem('pms_patients',JSON.stringify(backup.patients));localStorage.setItem('pms_patients_index',JSON.stringify(backup.index));localStorage.setItem('pms_config',JSON.stringify(backup.config));await this.loadPatientsIndex();log('Data restored from backup successfully','info');return {success: true,backupId: backupId,patientsCount: Object.keys(backup.patients).length,message: 'Data restored successfully'};} catch(error){log(`Restore failed: ${error.message}`,'error');throw new Error(`Restore failed: ${error.message}`);}} async getBackupsList(){try {const backups=[];for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith('pms_backup_')){try {const backupData=JSON.parse(localStorage.getItem(key));backups.push({id: key,createdAt: backupData.createdAt,patientsCount: Object.keys(backupData.patients||{}).length,version: backupData.version});} catch(error){log(`Invalid backup data for ${key}`,'warn');}}} backups.sort((a,b)=>b.createdAt-a.createdAt);return backups;} catch(error){log(`Failed to get backups list: ${error.message}`,'error');throw new Error(`Failed to get backups list: ${error.message}`);}} async cleanupOldBackups(){try {const backups=await this.getBackupsList();if(backups.length>5){const backupsToRemove=backups.slice(5);backupsToRemove.forEach(backup=>{localStorage.removeItem(backup.id);log(`Removed old backup: ${backup.id}`,'info');});}} catch(error){log(`Failed to cleanup old backups: ${error.message}`,'warn');}} async exportPatients(patientIds=null){try {if(!this.isInitialized){throw new Error('Storage not initialized');} const allPatients=JSON.parse(localStorage.getItem('pms_patients')||'{}');let patientsToExport={};if(patientIds&&Array.isArray(patientIds)){patientIds.forEach(id=>{if(allPatients[id]){patientsToExport[id]=allPatients[id];}});} else {patientsToExport=allPatients;} const exportData={exportedAt: getCurrentTimestamp(),version: '1.0.0',patientsCount: Object.keys(patientsToExport).length,patients: patientsToExport};log(`Exported ${exportData.patientsCount} patients`,'info');return exportData;} catch(error){log(`Export failed: ${error.message}`,'error');throw new Error(`Export failed: ${error.message}`);}} async importPatients(importData,options={}){try {if(!this.isInitialized){throw new Error('Storage not initialized');} if(!importData||!importData.patients){throw new Error('Invalid import data');} const {overwriteExisting=false}=options;const currentPatients=JSON.parse(localStorage.getItem('pms_patients')||'{}');let importedCount=0;let skippedCount=0;let errors=[];for(const [patientId,patientData] of Object.entries(importData.patients)){try {if(currentPatients[patientId]&&!overwriteExisting){skippedCount++;continue;} const patient=new Patient(patientData);const validation=patient.validate();if(!validation.isValid){errors.push({patientId,error: `Validation failed: ${validation.errors.map(e=>e.message).join(',')}`});continue;} await this.savePatient(patient.toJSON());importedCount++;} catch(error){errors.push({patientId,error: error.message});}} log(`Import completed: ${importedCount} imported,${skippedCount} skipped,${errors.length} errors`,'info');return {success: true,importedCount,skippedCount,errorsCount: errors.length,errors: errors.slice(0,10),message: `Import completed: ${importedCount} patients imported`};} catch(error){log(`Import failed: ${error.message}`,'error');throw new Error(`Import failed: ${error.message}`);}} async checkStorageHealth(){try {const health={isHealthy: true,issues: [],statistics: await this.getStatistics()};try {localStorage.setItem('pms_health_check','test');localStorage.removeItem('pms_health_check');} catch(error){health.isHealthy=false;health.issues.push('localStorage is not accessible');} try {const patients=JSON.parse(localStorage.getItem('pms_patients')||'{}');const index=JSON.parse(localStorage.getItem('pms_patients_index')||'[]');const storedIds=new Set(Object.keys(patients));const indexIds=new Set(index.map(p=>p.id));const missingInIndex=[...storedIds].filter(id=>!indexIds.has(id));const missingInStorage=[...indexIds].filter(id=>!storedIds.has(id));if(missingInIndex.length>0){health.issues.push(`${missingInIndex.length} patients missing from index`);} if(missingInStorage.length>0){health.issues.push(`${missingInStorage.length} patients in index but not in storage`);}} catch(error){health.isHealthy=false;health.issues.push('Data integrity check failed');} if(health.issues.length>0){health.isHealthy=false;} return health;} catch(error){return {isHealthy: false,issues: [`Health check failed: ${error.message}`],statistics: null};}} async repairStorage(){try {const repairs=[];const patients=JSON.parse(localStorage.getItem('pms_patients')||'{}');this.patientsIndex.clear();for(const [patientId,patientData] of Object.entries(patients)){try {const patient=Patient.fromJSON(patientData);const lastVisit=patient.getLatestVisit();this.patientsIndex.set(patient.id,{id: patient.id,firstName: patient.firstName,lastName: patient.lastName,fullName: patient.getFullName(),age: patient.age,gender: patient.gender,placeOfResidence: patient.placeOfResidence,lastVisitDate: lastVisit ? lastVisit.visitDate : null,createdAt: patient.createdAt,updatedAt: patient.updatedAt});} catch(error){repairs.push(`Failed to process patient ${patientId}: ${error.message}`);}} await this.savePatientsIndex();repairs.push('Index rebuilt successfully');log('Storage repair completed','info');return {success: true,repairs: repairs,message: 'Storage repaired successfully'};} catch(error){log(`Storage repair failed: ${error.message}`,'error');throw new Error(`Storage repair failed: ${error.message}`);}} async getStorageUsage(){try {let totalSize=0;let itemCount=0;for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith('pms_')){const value=localStorage.getItem(key);totalSize+=key.length+(value ? value.length : 0);itemCount++;}} const patients=localStorage.getItem('pms_patients');const index=localStorage.getItem('pms_patients_index');const config=localStorage.getItem('pms_config');const breakdown={patients: patients ? patients.length : 0,index: index ? index.length : 0,config: config ? config.length : 0,backups: 0};for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith('pms_backup_')){const value=localStorage.getItem(key);breakdown.backups+=value ? value.length : 0;}} return {totalSize: totalSize,formattedSize: formatFileSize(totalSize),itemCount: itemCount,patientsCount: this.patientsIndex.size,breakdown: breakdown,storageType: this.storageType};} catch(error){log(`Failed to get storage usage: ${error.message}`,'error');throw new Error(`Failed to get storage usage: ${error.message}`);}} async clearAllData(){try {if(!this.isInitialized){throw new Error('Storage not initialized');} const keysToRemove=[];for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith('pms_')){keysToRemove.push(key);}} keysToRemove.forEach(key=>localStorage.removeItem(key));this.patientsIndex.clear();await this.initializeLocalStorage();log('All patient data cleared successfully','info');return {success: true,clearedItems: keysToRemove.length,message: 'All data cleared successfully'};} catch(error){log(`Failed to clear data: ${error.message}`,'error');throw new Error(`Failed to clear data: ${error.message}`);}} setErrorHandler(errorHandler){this.errorHandler=errorHandler;} isStorageInitialized(){return this.isInitialized;} getStorageType(){return this.storageType;} getPatientsCount(){return this.patientsIndex.size;}} if(typeof module!=='undefined'&&module.exports){module.exports=DataStorageManager;} class PerformanceOptimizer {constructor(){this.searchIndex=new Map();this.searchCache=new Map();this.loadingIndicators=new Map();this.paginationCache=new Map();this.memoryThreshold=1000;this.cacheTimeout=5*60*1000;this.debounceTimers=new Map();this.metrics={searchTimes: [],loadTimes: [],cacheHits: 0,cacheMisses: 0};} async initialize(dataStorage){try {this.dataStorage=dataStorage;await this.buildSearchIndex();this.setupMemoryManagement();log('PerformanceOptimizer initialized successfully','info');return {success: true,message: 'Performance optimizer initialized'};} catch(error){log(`Failed to initialize PerformanceOptimizer: ${error.message}`,'error');throw new Error(`Performance optimizer initialization failed: ${error.message}`);}} async buildSearchIndex(){try {log('Building search index...','info');const startTime=performance.now();this.searchIndex.clear();const patients=await this.dataStorage.getAllPatients();patients.forEach(patient=>{this.indexPatient(patient);});const buildTime=performance.now()-startTime;log(`Search index built in ${buildTime.toFixed(2)} ms for ${patients.length} patients`,'info');} catch(error){log(`Failed to build search index: ${error.message}`,'error');throw error;}} indexPatient(patient){const searchTerms=[ patient.firstName?.toLowerCase(),patient.lastName?.toLowerCase(),patient.fullName?.toLowerCase(),patient.placeOfResidence?.toLowerCase(),patient.gender?.toLowerCase()].filter(term=>term);searchTerms.forEach(term=>{this.addToIndex(term,patient);for(let i=0;i<=term.length-2;i++){for(let j=i+2;j<=term.length;j++){const partial=term.substring(i,j);this.addToIndex(partial,patient);}}});} addToIndex(term,patient){if(!this.searchIndex.has(term)){this.searchIndex.set(term,new Set());} this.searchIndex.get(term).add(patient.id);} async optimizedSearch(searchTerm,options={}){const startTime=performance.now();const cacheKey=`${searchTerm}_${JSON.stringify(options)}`;try {if(this.searchCache.has(cacheKey)){const cached=this.searchCache.get(cacheKey);if(Date.now()-cached.timestamp<this.cacheTimeout){this.metrics.cacheHits++;log(`Search cache hit for "${searchTerm}"`,'info');return cached.results;}} this.metrics.cacheMisses++;const results=await this.performIndexedSearch(searchTerm,options);this.searchCache.set(cacheKey,{results,timestamp: Date.now()});this.cleanupCache();const searchTime=performance.now()-startTime;this.metrics.searchTimes.push(searchTime);log(`Optimized search completed in ${searchTime.toFixed(2)} ms`,'info');return results;} catch(error){log(`Optimized search failed: ${error.message}`,'error');throw error;}} async performIndexedSearch(searchTerm,options={}){const normalizedTerm=searchTerm.toLowerCase().trim();const matchingPatientIds=new Set();for(const [indexTerm,patientIds] of this.searchIndex.entries()){if(indexTerm.includes(normalizedTerm)){patientIds.forEach(id=>matchingPatientIds.add(id));}} const patients=[];for(const patientId of matchingPatientIds){try {const patient=await this.dataStorage.loadPatient(patientId);if(patient){patients.push({id: patient.id,firstName: patient.firstName,lastName: patient.lastName,fullName: patient.getFullName(),age: patient.age,gender: patient.gender,placeOfResidence: patient.placeOfResidence,lastVisitDate: patient.getLatestVisit()?.visitDate,createdAt: patient.createdAt,updatedAt: patient.updatedAt});}} catch(error){log(`Error loading patient ${patientId}: ${error.message}`,'warn');}} return this.sortSearchResults(patients,normalizedTerm,options);} sortSearchResults(patients,searchTerm,options={}){return patients.sort((a,b)=>{const scoreA=this.calculateRelevanceScore(a,searchTerm);const scoreB=this.calculateRelevanceScore(b,searchTerm);if(scoreA!==scoreB){return scoreB-scoreA;} return a.fullName.localeCompare(b.fullName);});} calculateRelevanceScore(patient,searchTerm){let score=0;const term=searchTerm.toLowerCase();if(patient.fullName.toLowerCase()===term){score+=100;} if(patient.firstName.toLowerCase()===term){score+=80;} if(patient.lastName.toLowerCase()===term){score+=80;} if(patient.fullName.toLowerCase().startsWith(term)){score+=60;} if(patient.fullName.toLowerCase().includes(term)){score+=40;} if(patient.placeOfResidence?.toLowerCase().includes(term)){score+=20;} return score;} paginateResults(results,paginationOptions={}){const {page=1,pageSize=20,cacheKey=null}=paginationOptions;const totalItems=results.length;const totalPages=Math.ceil(totalItems/pageSize);const startIndex=(page-1)*pageSize;const endIndex=Math.min(startIndex+pageSize,totalItems);const paginatedResults=results.slice(startIndex,endIndex);if(cacheKey){this.paginationCache.set(cacheKey,{results: paginatedResults,metadata:{currentPage: page,pageSize,totalItems,totalPages,hasNextPage: page<totalPages,hasPreviousPage: page>1},timestamp: Date.now()});} return {results: paginatedResults,metadata:{currentPage: page,pageSize,totalItems,totalPages,hasNextPage: page<totalPages,hasPreviousPage: page>1,startIndex: startIndex+1,endIndex}};} showLoadingIndicator(operationId,message='Loading...',container=null){const loadingHtml=`<div class="loading-indicator" id="loading-${operationId}"><div class="loading-spinner"></div><div class="loading-message">${message}</div></div>`;if(container){container.innerHTML=loadingHtml;} else {const searchContainer=document.getElementById('search-results-container');const dynamicContent=document.getElementById('dynamic-content');const targetContainer=searchContainer||dynamicContent;if(targetContainer){targetContainer.innerHTML=loadingHtml;}} this.loadingIndicators.set(operationId,{startTime: Date.now(),message,container});log(`Loading indicator shown for operation: ${operationId}`,'info');} hideLoadingIndicator(operationId){const indicator=document.getElementById(`loading-${operationId}`);if(indicator){indicator.remove();} const loadingInfo=this.loadingIndicators.get(operationId);if(loadingInfo){const duration=Date.now()-loadingInfo.startTime;this.metrics.loadTimes.push(duration);this.loadingIndicators.delete(operationId);log(`Loading indicator hidden for operation: ${operationId}(${duration} ms)`,'info');}} debounce(key,func,delay=300){if(this.debounceTimers.has(key)){clearTimeout(this.debounceTimers.get(key));} const timer=setTimeout(()=>{func();this.debounceTimers.delete(key);},delay);this.debounceTimers.set(key,timer);} setupLazyLoading(allPatients,options={}){const {containerSelector='.patient-list',itemHeight=120,bufferSize=5,pageSize=20}=options;return {totalItems: allPatients.length,itemHeight,bufferSize,pageSize,getVisibleItems:(scrollTop,containerHeight)=>{const startIndex=Math.floor(scrollTop/itemHeight);const endIndex=Math.min(startIndex+Math.ceil(containerHeight/itemHeight)+bufferSize,allPatients.length);return {startIndex: Math.max(0,startIndex-bufferSize),endIndex,items: allPatients.slice(Math.max(0,startIndex-bufferSize),endIndex)};},getTotalHeight:()=>allPatients.length*itemHeight};} setupMemoryManagement(){setInterval(()=>{this.cleanupCache();this.cleanupPaginationCache();},60000);if('memory' in performance){setInterval(()=>{this.monitorMemoryUsage();},30000);}} cleanupCache(){const now=Date.now();for(const [key,cached] of this.searchCache.entries()){if(now-cached.timestamp>this.cacheTimeout){this.searchCache.delete(key);}} if(this.searchCache.size>this.memoryThreshold){const entries=Array.from(this.searchCache.entries());entries.sort((a,b)=>a[1].timestamp-b[1].timestamp);const toRemove=entries.slice(0,entries.length-this.memoryThreshold);toRemove.forEach(([key])=>this.searchCache.delete(key));}} cleanupPaginationCache(){const now=Date.now();for(const [key,cached] of this.paginationCache.entries()){if(now-cached.timestamp>this.cacheTimeout){this.paginationCache.delete(key);}}} monitorMemoryUsage(){if('memory' in performance){const memInfo=performance.memory;const usedMB=memInfo.usedJSHeapSize/1024/1024;const limitMB=memInfo.jsHeapSizeLimit/1024/1024;const usagePercent=(usedMB/limitMB)*100;log(`Memory usage: ${usedMB.toFixed(2)} MB/${limitMB.toFixed(2)} MB(${usagePercent.toFixed(1)}%)`,'info');if(usagePercent>80){log('High memory usage detected,forcing cleanup','warn');this.forceMemoryCleanup();}}} forceMemoryCleanup(){this.searchCache.clear();this.paginationCache.clear();this.debounceTimers.forEach(timer=>clearTimeout(timer));this.debounceTimers.clear();if(window.gc){window.gc();} log('Forced memory cleanup completed','info');} getPerformanceMetrics(){const avgSearchTime=this.metrics.searchTimes.length>0 ? this.metrics.searchTimes.reduce((a,b)=>a+b,0)/this.metrics.searchTimes.length : 0;const avgLoadTime=this.metrics.loadTimes.length>0 ? this.metrics.loadTimes.reduce((a,b)=>a+b,0)/this.metrics.loadTimes.length : 0;const cacheHitRate=this.metrics.cacheHits+this.metrics.cacheMisses>0 ?(this.metrics.cacheHits/(this.metrics.cacheHits+this.metrics.cacheMisses))*100 : 0;return {searchIndex:{size: this.searchIndex.size,memoryUsage: this.estimateIndexMemoryUsage()},cache:{searchCacheSize: this.searchCache.size,paginationCacheSize: this.paginationCache.size,hitRate: cacheHitRate.toFixed(2)+'%',hits: this.metrics.cacheHits,misses: this.metrics.cacheMisses},performance:{averageSearchTime: avgSearchTime.toFixed(2)+'ms',averageLoadTime: avgLoadTime.toFixed(2)+'ms',totalSearches: this.metrics.searchTimes.length,totalLoads: this.metrics.loadTimes.length},memory:{loadingIndicators: this.loadingIndicators.size,debounceTimers: this.debounceTimers.size}};} estimateIndexMemoryUsage(){let totalSize=0;for(const [term,patientIds] of this.searchIndex.entries()){totalSize+=term.length*2;totalSize+=patientIds.size*36;} return(totalSize/1024).toFixed(2)+' KB';} updateSearchIndex(patient,operation){try {if(operation==='delete'){for(const [term,patientIds] of this.searchIndex.entries()){patientIds.delete(patient.id);if(patientIds.size===0){this.searchIndex.delete(term);}}} else {this.indexPatient(patient);} this.searchCache.clear();this.paginationCache.clear();log(`Search index updated for patient ${patient.id}(${operation})`,'info');} catch(error){log(`Failed to update search index: ${error.message}`,'error');}}} if(typeof module!=='undefined'&&module.exports){module.exports=PerformanceOptimizer;} class AuthenticationManager {constructor(){this.currentSession=null;this.loginAttempts=0;this.lockoutTime=null;this.sessionTimeout=AUTH_CONFIG.sessionTimeout;this.maxLoginAttempts=AUTH_CONFIG.maxLoginAttempts;this.lockoutDuration=AUTH_CONFIG.lockoutDuration;this.initializeSession();this.setupSessionMonitoring();} initializeSession(){try {const sessionData=sessionStorage.getItem(AUTH_CONFIG.sessionStorageKey);if(sessionData){const session=JSON.parse(sessionData);if(this.isSessionValid(session)){this.currentSession=new Session(session);this.updateLastActivity();} else {this.clearSession();}}} catch(error){console.error('Error initializing session:',error);this.clearSession();}} setupSessionMonitoring(){const events=['mousedown','mousemove','keypress','scroll','touchstart'];const updateActivity=debounce(()=>{if(this.isAuthenticated()){this.updateLastActivity();}},30000);events.forEach(event=>{document.addEventListener(event,updateActivity,true);});setInterval(()=>{if(this.currentSession&&!this.isSessionValid(this.currentSession)){this.handleSessionExpired();}},60000);} async login(username,password){try {if(this.isLockedOut()){throw new Error(ERROR_MESSAGES.auth.tooManyAttempts);} if(!username||!password){throw new Error('Username and password are required');} const isValid=await this.validateCredentials(username,password);if(isValid){const sessionData={userId: generateId(),username: username.trim(),loginTime: getCurrentTimestamp(),lastActivity: getCurrentTimestamp(),isAuthenticated: true};this.currentSession=new Session(sessionData);this.saveSession();this.loginAttempts=0;this.lockoutTime=null;log(`User ${username} logged in successfully`);return true;} else {this.loginAttempts++;if(this.loginAttempts>=this.maxLoginAttempts){this.lockoutTime=getCurrentTimestamp();log(`Account locked due to too many failed attempts`);} throw new Error(ERROR_MESSAGES.auth.invalidCredentials);}} catch(error){log(`Login failed: ${error.message}`,'error');throw error;}} logout(clearSession=true){try {const username=this.currentSession?.username||'Unknown';if(clearSession){this.clearSession();} this.currentSession=null;log(`User ${username} logged out`);} catch(error){console.error('Error during logout:',error);this.clearSession();this.currentSession=null;}} isAuthenticated(){return this.currentSession&&this.currentSession.isAuthenticated&&this.isSessionValid(this.currentSession);} getCurrentUser(){if(!this.isAuthenticated()){return null;} return {userId: this.currentSession.userId,username: this.currentSession.username,loginTime: this.currentSession.loginTime,lastActivity: this.currentSession.lastActivity};} async validateCredentials(username,password){try {const validUsername='dr.sahboub';const validPasswordHash=await this.hashPassword('pneumo2024');const inputPasswordHash=await this.hashPassword(password);return username.toLowerCase().trim()===validUsername&&inputPasswordHash===validPasswordHash;} catch(error){console.error('Error validating credentials:',error);return false;}} async hashPassword(password){try {const encoder=new TextEncoder();const data=encoder.encode(password+'pneumo_salt_2024');const hashBuffer=await crypto.subtle.digest('SHA-256',data);const hashArray=Array.from(new Uint8Array(hashBuffer));return hashArray.map(b=>b.toString(16).padStart(2,'0')).join('');} catch(error){console.error('Error hashing password:',error);return this.simpleHash(password);}} simpleHash(str){let hash=0;const salt='pneumo_salt_2024';const input=str+salt;for(let i=0;i<input.length;i++){const char=input.charCodeAt(i);hash=((hash<<5)-hash)+char;hash=hash&hash;} return Math.abs(hash).toString(16);} isSessionValid(session){if(!session||!session.isAuthenticated){return false;} const now=getCurrentTimestamp();const sessionAge=now-session.loginTime;const inactivityTime=now-session.lastActivity;if(sessionAge>this.sessionTimeout){return false;} if(inactivityTime>(2*60*60*1000)){return false;} return true;} isLockedOut(){if(!this.lockoutTime){return false;} const now=getCurrentTimestamp();const lockoutElapsed=now-this.lockoutTime;if(lockoutElapsed>this.lockoutDuration){this.lockoutTime=null;this.loginAttempts=0;return false;} return true;} getLockoutTimeRemaining(){if(!this.isLockedOut()){return 0;} const now=getCurrentTimestamp();const remaining=this.lockoutDuration-(now-this.lockoutTime);return Math.ceil(remaining/(60*1000));} updateLastActivity(){if(this.currentSession){this.currentSession.updateActivity();this.saveSession();}} saveSession(){try {if(this.currentSession){sessionStorage.setItem(AUTH_CONFIG.sessionStorageKey,JSON.stringify(this.currentSession.toJSON()));}} catch(error){console.error('Error saving session:',error);}} clearSession(){try {sessionStorage.removeItem(AUTH_CONFIG.sessionStorageKey);} catch(error){console.error('Error clearing session:',error);}} handleSessionExpired(){log('Session expired,logging out user');this.logout();if(typeof window!=='undefined'&&window.app){window.app.showSessionExpiredMessage();}} getLoginAttemptsInfo(){return {attempts: this.loginAttempts,maxAttempts: this.maxLoginAttempts,isLockedOut: this.isLockedOut(),lockoutTimeRemaining: this.getLockoutTimeRemaining()};} refreshSession(){if(this.isAuthenticated()){this.currentSession.loginTime=getCurrentTimestamp();this.updateLastActivity();log('Session refreshed');}} async checkUnsavedChanges(){try {if(typeof window!=='undefined'&&window.app&&window.app.components.changeTracker){return!window.app.components.changeTracker.hasUnsavedChanges();} if(typeof window!=='undefined'&&window.app&&window.app.components.formManager){const formManager=window.app.components.formManager;for(const formId of Object.keys(formManager.unsavedChanges||{})){if(formManager.hasUnsavedChanges&&formManager.hasUnsavedChanges(formId)){return false;}}} return true;} catch(error){console.error('Error checking unsaved changes:',error);return false;}} getUnsavedChangesDetails(){try {if(typeof window!=='undefined'&&window.app&&window.app.components.changeTracker){return window.app.components.changeTracker.getUnsavedChangesDetails();} return {hasChanges: false,descriptions: []};} catch(error){console.error('Error getting unsaved changes details:',error);return {hasChanges: false,descriptions: []};}}} if(typeof module!=='undefined'&&module.exports){module.exports=AuthenticationManager;} class LoginView {constructor(authManager){this.authManager=authManager;this.loginForm=null;this.isSubmitting=false;this.render=this.render.bind(this);this.handleSubmit=this.handleSubmit.bind(this);this.handleInputChange=this.handleInputChange.bind(this);this.showError=this.showError.bind(this);this.clearError=this.clearError.bind(this);} render(){const attemptsInfo=this.authManager.getLoginAttemptsInfo();const isLockedOut=attemptsInfo.isLockedOut;const lockoutTime=attemptsInfo.lockoutTimeRemaining;return `<div class="login-container"><div class="login-card"><div class="login-header"><div class="login-logo-container"><!--Logo will be inserted here by LogoManager--></div><p class="login-subtitle">Patient Management System</p></div><div class="login-body"><form class="login-form" id="loginForm"><div id="loginError" class="login-error" style="display: none;"></div><div class="form-group"><label for="username" class="form-label">Username</label><input type="text" id="username" name="username" class="form-control" required autocomplete="username" ${isLockedOut ? 'disabled' : ''} placeholder="Enter your username"></div><div class="form-group"><label for="password" class="form-label">Password</label><input type="password" id="password" name="password" class="form-control" required autocomplete="current-password" ${isLockedOut ? 'disabled' : ''} placeholder="Enter your password"></div><button type="submit" class="btn btn-primary login-btn" id="loginBtn" ${isLockedOut ? 'disabled' : ''}>${isLockedOut ? `Locked(${lockoutTime} m remaining)` : 'Sign In'}</button>${attemptsInfo.attempts>0&&!isLockedOut ? `<div class="login-attempts">${attemptsInfo.maxAttempts-attemptsInfo.attempts} attempt${attemptsInfo.maxAttempts-attemptsInfo.attempts!==1 ? 's' : ''} remaining</div>` : ''}</form></div></div></div>`;} initialize(){this.loginForm=document.getElementById('loginForm');if(this.loginForm){this.loginForm.addEventListener('submit',this.handleSubmit);const inputs=this.loginForm.querySelectorAll('input');inputs.forEach(input=>{input.addEventListener('input',this.handleInputChange);input.addEventListener('focus',this.clearError);});const usernameField=document.getElementById('username');if(usernameField&&!usernameField.disabled){setTimeout(()=>usernameField.focus(),100);} const attemptsInfo=this.authManager.getLoginAttemptsInfo();if(attemptsInfo.isLockedOut){this.startLockoutTimer();}}} async handleSubmit(event){event.preventDefault();if(this.isSubmitting){return;} this.clearError();this.isSubmitting=true;try {const formData=new FormData(this.loginForm);const username=formData.get('username').trim();const password=formData.get('password');if(!username||!password){throw new Error('Please enter both username and password');} const loginBtn=document.getElementById('loginBtn');const originalText=loginBtn.textContent;loginBtn.textContent='Signing in...';loginBtn.disabled=true;const success=await this.authManager.login(username,password);if(success){this.showSuccess('Login successful!Redirecting...');setTimeout(()=>{if(window.app&&window.app.handleLoginSuccess){window.app.handleLoginSuccess();} else {window.location.reload();}},1000);}} catch(error){this.showError(error.message);const loginBtn=document.getElementById('loginBtn');const attemptsInfo=this.authManager.getLoginAttemptsInfo();if(attemptsInfo.isLockedOut){loginBtn.textContent=`Locked(${attemptsInfo.lockoutTimeRemaining} m remaining)`;loginBtn.disabled=true;this.startLockoutTimer();} else {loginBtn.textContent='Sign In';loginBtn.disabled=false;} this.updateAttemptsDisplay();} finally {this.isSubmitting=false;}} handleInputChange(event){const input=event.target;if(input.classList.contains('error')){input.classList.remove('error');}} showError(message){const errorDiv=document.getElementById('loginError');if(errorDiv){errorDiv.textContent=message;errorDiv.style.display='block';const inputs=this.loginForm.querySelectorAll('input');inputs.forEach(input=>input.classList.add('error'));}} showSuccess(message){const errorDiv=document.getElementById('loginError');if(errorDiv){errorDiv.textContent=message;errorDiv.style.display='block';errorDiv.style.backgroundColor='#f0f9ff';errorDiv.style.borderColor='#bfdbfe';errorDiv.style.color='#1e40af';}} clearError(){const errorDiv=document.getElementById('loginError');if(errorDiv){errorDiv.style.display='none';errorDiv.textContent='';errorDiv.style.backgroundColor='';errorDiv.style.borderColor='';errorDiv.style.color='';} if(this.loginForm){const inputs=this.loginForm.querySelectorAll('input');inputs.forEach(input=>input.classList.remove('error'));}} updateAttemptsDisplay(){const attemptsInfo=this.authManager.getLoginAttemptsInfo();const container=this.loginForm.querySelector('.login-attempts');if(attemptsInfo.attempts>0&&!attemptsInfo.isLockedOut){const remaining=attemptsInfo.maxAttempts-attemptsInfo.attempts;const attemptsHtml=`<div class="login-attempts">${remaining} attempt${remaining!==1 ? 's' : ''} remaining</div>`;if(container){container.outerHTML=attemptsHtml;} else {this.loginForm.insertAdjacentHTML('beforeend',attemptsHtml);}} else if(container){container.remove();}} startLockoutTimer(){const loginBtn=document.getElementById('loginBtn');const usernameInput=document.getElementById('username');const passwordInput=document.getElementById('password');const timer=setInterval(()=>{const attemptsInfo=this.authManager.getLoginAttemptsInfo();if(!attemptsInfo.isLockedOut){clearInterval(timer);if(loginBtn){loginBtn.textContent='Sign In';loginBtn.disabled=false;} if(usernameInput)usernameInput.disabled=false;if(passwordInput)passwordInput.disabled=false;this.updateAttemptsDisplay();} else {if(loginBtn){loginBtn.textContent=`Locked(${attemptsInfo.lockoutTimeRemaining} m remaining)`;}}},1000);} destroy(){if(this.loginForm){this.loginForm.removeEventListener('submit',this.handleSubmit);const inputs=this.loginForm.querySelectorAll('input');inputs.forEach(input=>{input.removeEventListener('input',this.handleInputChange);input.removeEventListener('focus',this.clearError);});}}} if(typeof module!=='undefined'&&module.exports){module.exports=LoginView;} class PatientManager {constructor(dataStorageManager=null){this.dataStorage=dataStorageManager;this.isInitialized=false;this.errorHandler=null;} async initialize(dataStorageManager,errorHandler=null){try {this.dataStorage=dataStorageManager;this.errorHandler=errorHandler;if(!this.dataStorage.isInitialized){await this.dataStorage.initializeStorage();} this.isInitialized=true;log('PatientManager initialized successfully','info');return {success: true,message: 'Patient manager initialized successfully'};} catch(error){log(`Failed to initialize PatientManager: ${error.message}`,'error');throw new Error(`Patient manager initialization failed: ${error.message}`);}} async createPatient(patientData){try {if(!this.isInitialized){throw new Error('PatientManager not initialized');} log('Creating new patient record...','info');if(!patientData||typeof patientData!=='object'){throw new Error('Invalid patient data provided');} const patient=new Patient(patientData);const validation=patient.validate();if(!validation.isValid){const errorMessages=validation.errors.map(error=>error.message).join(',');throw new Error(`Patient validation failed: ${errorMessages}`);} patient.sanitize();if(!patient.id){patient.id=generateId();} patient.createdAt=getCurrentTimestamp();patient.updatedAt=getCurrentTimestamp();const saveResult=await this.dataStorage.savePatient(patient.toJSON());if(!saveResult.success){throw new Error(saveResult.message||'Failed to save patient to storage');} log(`Patient ${patient.getFullName()} created successfully with ID: ${patient.id}`,'info');return {success: true,patientId: patient.id,patient: patient.toJSON(),message: SUCCESS_MESSAGES.patient.created};} catch(error){log(`Failed to create patient: ${error.message}`,'error');if(this.errorHandler){this.errorHandler.handleError(error,'createPatient');} throw new Error(`Failed to create patient: ${error.message}`);}} async getPatient(patientId){try {if(!this.isInitialized){throw new Error('PatientManager not initialized');} if(!patientId){throw new Error('Patient ID is required');} log(`Retrieving patient with ID: ${patientId}`,'info');const patient=await this.dataStorage.loadPatient(patientId);if(!patient){log(`Patient with ID ${patientId} not found`,'info');return null;} log(`Patient ${patient.getFullName()} retrieved successfully`,'info');return patient;} catch(error){log(`Failed to get patient ${patientId}: ${error.message}`,'error');if(this.errorHandler){this.errorHandler.handleError(error,'getPatient');} throw new Error(`Failed to get patient: ${error.message}`);}} async updatePatient(patientId,patientData){try {if(!this.isInitialized){throw new Error('PatientManager not initialized');} if(!patientId){throw new Error('Patient ID is required');} if(!patientData||typeof patientData!=='object'){throw new Error('Invalid patient data provided');} log(`Updating patient with ID: ${patientId}`,'info');const existingPatient=await this.dataStorage.loadPatient(patientId);if(!existingPatient){throw new Error('Patient not found');} const updatedData={...existingPatient.toJSON(),...patientData,id: patientId,createdAt: existingPatient.createdAt,updatedAt: getCurrentTimestamp()};const updatedPatient=new Patient(updatedData);const validation=updatedPatient.validate();if(!validation.isValid){const errorMessages=validation.errors.map(error=>error.message).join(',');throw new Error(`Patient validation failed: ${errorMessages}`);} updatedPatient.sanitize();const saveResult=await this.dataStorage.savePatient(updatedPatient.toJSON());if(!saveResult.success){throw new Error(saveResult.message||'Failed to save updated patient to storage');} log(`Patient ${updatedPatient.getFullName()} updated successfully`,'info');return {success: true,patientId: updatedPatient.id,patient: updatedPatient.toJSON(),message: SUCCESS_MESSAGES.patient.updated};} catch(error){log(`Failed to update patient ${patientId}: ${error.message}`,'error');if(this.errorHandler){this.errorHandler.handleError(error,'updatePatient');} throw new Error(`Failed to update patient: ${error.message}`);}} async deletePatient(patientId){try {if(!this.isInitialized){throw new Error('PatientManager not initialized');} if(!patientId){throw new Error('Patient ID is required');} log(`Deleting patient with ID: ${patientId}`,'info');const existingPatient=await this.dataStorage.loadPatient(patientId);if(!existingPatient){throw new Error('Patient not found');} const patientName=existingPatient.getFullName();const deleteResult=await this.dataStorage.deletePatient(patientId);if(!deleteResult.success){throw new Error(deleteResult.message||'Failed to delete patient from storage');} log(`Patient ${patientName} deleted successfully`,'info');return {success: true,patientId: patientId,message: SUCCESS_MESSAGES.patient.deleted};} catch(error){log(`Failed to delete patient ${patientId}: ${error.message}`,'error');if(this.errorHandler){this.errorHandler.handleError(error,'deletePatient');} throw new Error(`Failed to delete patient: ${error.message}`);}} async searchPatients(searchCriteria){try {if(!this.isInitialized){throw new Error('PatientManager not initialized');} log('Searching for patients...','info');let criteria={};if(typeof searchCriteria==='string'){criteria.searchTerm=searchCriteria.trim();} else if(typeof searchCriteria==='object'&&searchCriteria!==null){criteria={...searchCriteria};} const results=await this.dataStorage.searchPatients(criteria);log(`Found ${results.length} patients matching search criteria`,'info');return results;} catch(error){log(`Failed to search patients: ${error.message}`,'error');if(this.errorHandler){this.errorHandler.handleError(error,'searchPatients');} throw new Error(`Failed to search patients: ${error.message}`);}} async getAllPatients(options={}){try {if(!this.isInitialized){throw new Error('PatientManager not initialized');} log('Retrieving all patients...','info');const patients=await this.dataStorage.getAllPatients(options);log(`Retrieved ${patients.length} patients`,'info');return patients;} catch(error){log(`Failed to get all patients: ${error.message}`,'error');if(this.errorHandler){this.errorHandler.handleError(error,'getAllPatients');} throw new Error(`Failed to get all patients: ${error.message}`);}} async getPatientStatistics(){try {if(!this.isInitialized){throw new Error('PatientManager not initialized');} log('Retrieving patient statistics...','info');const stats=await this.dataStorage.getStatistics();log('Patient statistics retrieved successfully','info');return stats;} catch(error){log(`Failed to get patient statistics: ${error.message}`,'error');if(this.errorHandler){this.errorHandler.handleError(error,'getPatientStatistics');} throw new Error(`Failed to get patient statistics: ${error.message}`);}} validatePatientData(patientData){try {if(!patientData||typeof patientData!=='object'){return {isValid: false,errors: [{field: 'general',message: 'Invalid patient data provided'}]};} const patient=new Patient(patientData);return patient.validate();} catch(error){log(`Failed to validate patient data: ${error.message}`,'error');return {isValid: false,errors: [{field: 'general',message: error.message}]};}} async createBackup(){try {if(!this.isInitialized){throw new Error('PatientManager not initialized');} log('Creating patient data backup...','info');const backupResult=await this.dataStorage.createBackup();log('Patient data backup created successfully','info');return backupResult;} catch(error){log(`Failed to create backup: ${error.message}`,'error');if(this.errorHandler){this.errorHandler.handleError(error,'createBackup');} throw new Error(`Failed to create backup: ${error.message}`);}} isReady(){return this.isInitialized&&this.dataStorage&&this.dataStorage.isInitialized;} getStatus(){return {isInitialized: this.isInitialized,hasDataStorage:!!this.dataStorage,dataStorageInitialized: this.dataStorage ? this.dataStorage.isInitialized : false,isReady: this.isReady()};}} if(typeof module!=='undefined'&&module.exports){module.exports=PatientManager;} class PatientSearchView {constructor(patientManager,uiRouter=null){this.patientManager=patientManager;this.uiRouter=uiRouter;this.searchResults=[];this.currentSearchTerm='';this.isSearching=false;this.handleSearch=this.handleSearch.bind(this);this.handlePatientSelect=this.handlePatientSelect.bind(this);this.clearSearch=this.clearSearch.bind(this);this.renderSearchResults=this.renderSearchResults.bind(this);} render(){return `<div class="search-container"><div class="content-header"><h2 class="content-title">Search Patients</h2><p class="content-subtitle">Find existing patient records by name</p></div><!--Search Form--><div class="card"><div class="card-body"><form class="search-form" id="patient-search-form"><div class="search-input-group"><input type="text" id="search-input" class="form-control search-input" placeholder="Enter patient first name or last name..." autocomplete="off" value="${this.currentSearchTerm}"><button type="submit" class="btn btn-primary search-button" id="search-button"><span class="search-icon">🔍</span>Search</button><button type="button" class="btn btn-secondary clear-button" id="clear-button" style="display: none;">Clear</button></div></form></div></div><!--Search Results--><div id="search-results-container" class="search-results-container">${this.renderSearchResults()}</div></div>`;} renderSearchResults(){if(this.isSearching){return `<div class="card"><div class="card-body text-center"><div class="loading-spinner"></div><p>Searching patients...</p></div></div>`;} if(this.currentSearchTerm&&this.searchResults.length===0){return `<div class="card"><div class="card-body text-center no-results"><div class="no-results-icon">🔍</div><h3>No patients found</h3><p>No patients match your search for "<strong>${this.currentSearchTerm}</strong>"</p><p class="text-muted">Try searching with a different name or check the spelling.</p><button class="btn btn-secondary" onclick="document.getElementById('search-input').focus()">Try Another Search</button></div></div>`;} if(this.searchResults.length>0){return `<div class="card"><div class="card-header"><h3 class="card-title">Search Results<span class="results-count">(${this.searchResults.length} patient${this.searchResults.length!==1 ? 's' : ''} found)</span></h3></div><div class="card-body"><div class="patient-list">${this.searchResults.map(patient=>this.renderPatientItem(patient)).join('')}</div></div></div>`;} if(!this.currentSearchTerm){return `<div class="card"><div class="card-body text-center search-instructions"><div class="search-instructions-icon">👥</div><h3>Search for Patients</h3><p>Enter a patient's first name or last name in the search box above to find their records.</p><div class="search-tips"><h4>Search Tips:</h4><ul><li>You can search by first name,last name,or both</li><li>Search is case-insensitive</li><li>Partial matches are supported</li></ul></div></div></div>`;} return '';} renderPatientItem(patient){const age=patient.age||'Unknown';const gender=patient.gender||'Not specified';const residence=patient.placeOfResidence||'Not specified';const lastVisit=patient.lastVisitDate ? new Date(patient.lastVisitDate).toLocaleDateString(): 'No visits recorded';return `<div class="patient-item" data-patient-id="${patient.id}" onclick="patientSearchView.handlePatientSelect('${patient.id}')"><div class="patient-item-header"><h4 class="patient-name">${patient.fullName}</h4><div class="patient-actions"><button class="btn btn-sm btn-primary view-patient-btn" data-patient-id="${patient.id}">View Details</button></div></div><div class="patient-details"><div class="patient-detail-row"><span class="detail-label">Age:</span><span class="detail-value">${age}</span></div><div class="patient-detail-row"><span class="detail-label">Gender:</span><span class="detail-value">${gender}</span></div><div class="patient-detail-row"><span class="detail-label">Residence:</span><span class="detail-value">${residence}</span></div><div class="patient-detail-row"><span class="detail-label">Last Visit:</span><span class="detail-value">${lastVisit}</span></div></div></div>`;} initialize(){const searchForm=document.getElementById('patient-search-form');const searchInput=document.getElementById('search-input');const clearButton=document.getElementById('clear-button');if(searchForm){searchForm.addEventListener('submit',this.handleSearch);} if(searchInput){let searchTimeout;searchInput.addEventListener('input',(event)=>{clearTimeout(searchTimeout);const searchTerm=event.target.value.trim();if(clearButton){clearButton.style.display=searchTerm ? 'block' : 'none';} searchTimeout=setTimeout(()=>{if(searchTerm.length>=2){this.performSearch(searchTerm);} else if(searchTerm.length===0){this.clearSearch();}},300);});searchInput.focus();} if(clearButton){clearButton.addEventListener('click',this.clearSearch);} log('PatientSearchView initialized','info');} async handleSearch(event){event.preventDefault();const searchInput=document.getElementById('search-input');if(!searchInput)return;const searchTerm=searchInput.value.trim();if(!searchTerm){this.showToast('Please enter a search term','warning');return;} await this.performSearch(searchTerm);} async performSearch(searchTerm){try {this.isSearching=true;this.currentSearchTerm=searchTerm;this.updateSearchResults();log(`Searching for patients with term: "${searchTerm}"`,'info');let results;if(window.app&&window.app.components.performanceOptimizer){const operationId='patient-search';window.app.components.performanceOptimizer.showLoadingIndicator(operationId,'Searching patients...',document.getElementById('search-results-container'));results=await window.app.components.performanceOptimizer.optimizedSearch(searchTerm);window.app.components.performanceOptimizer.hideLoadingIndicator(operationId);} else {results=await this.patientManager.searchPatients(searchTerm);} this.searchResults=results;this.isSearching=false;log(`Found ${results.length} patients matching search term`,'info');this.updateSearchResults();} catch(error){this.isSearching=false;log(`Search failed: ${error.message}`,'error');this.showToast('Search failed. Please try again.','error');this.updateSearchResults();}} clearSearch(){this.currentSearchTerm='';this.searchResults=[];this.isSearching=false;const searchInput=document.getElementById('search-input');const clearButton=document.getElementById('clear-button');if(searchInput){searchInput.value='';searchInput.focus();} if(clearButton){clearButton.style.display='none';} this.updateSearchResults();log('Search cleared','info');} updateSearchResults(){const resultsContainer=document.getElementById('search-results-container');if(resultsContainer){resultsContainer.innerHTML=this.renderSearchResults();}} async handlePatientSelect(patientId){try {log(`Patient selected: ${patientId}`,'info');if(this.uiRouter){this.uiRouter.navigateTo('patient-detail',{patientId});} else if(window.app){window.app.navigateToRoute('patient-detail',{patientId});} else {await this.showPatientDetailsModal(patientId);}} catch(error){log(`Failed to select patient: ${error.message}`,'error');this.showToast('Failed to load patient details','error');}} async showPatientDetailsModal(patientId){try {const patient=await this.patientManager.getPatient(patientId);if(!patient){throw new Error('Patient not found');} const patientDetailView=new PatientDetailView(patient);const modalContent=patientDetailView.render();this.showModal('Patient Details',modalContent);} catch(error){log(`Failed to show patient details: ${error.message}`,'error');this.showToast('Failed to load patient details','error');}} showToast(message,type='info'){if(window.app&&window.app.showToast){window.app.showToast(message,type);} else {alert(message);}} showModal(title,content){const modalContainer=document.getElementById('modal-container');if(!modalContainer)return;modalContainer.innerHTML=`<div class="modal"><div class="modal-header"><h3 class="modal-title">${title}</h3><button class="modal-close" onclick="this.closest('.modal-container').classList.add('hidden')">&times;</button></div><div class="modal-body">${content}</div><div class="modal-footer"><button class="btn btn-secondary" onclick="this.closest('.modal-container').classList.add('hidden')">Close</button></div></div>`;modalContainer.classList.remove('hidden');} destroy(){const searchForm=document.getElementById('patient-search-form');if(searchForm){searchForm.removeEventListener('submit',this.handleSearch);} log('PatientSearchView destroyed','info');}} if(typeof module!=='undefined'&&module.exports){module.exports=PatientSearchView;} class PatientListView {constructor(patientManager,performanceOptimizer=null){this.patientManager=patientManager;this.performanceOptimizer=performanceOptimizer;this.allPatients=[];this.currentPage=1;this.pageSize=20;this.totalPages=0;this.isLoading=false;this.sortBy='lastName';this.sortOrder='asc';this.filterOptions={gender: '',ageRange:{min: '',max: ''},residence: ''};this.virtualScrolling={enabled: false,itemHeight: 120,containerHeight: 600,scrollTop: 0,visibleItems: [],totalHeight: 0};this.handlePageChange=this.handlePageChange.bind(this);this.handleSortChange=this.handleSortChange.bind(this);this.handleFilterChange=this.handleFilterChange.bind(this);this.handleScroll=this.handleScroll.bind(this);this.handlePatientSelect=this.handlePatientSelect.bind(this);} render(){return `<div class="patient-list-container"><div class="content-header"><h2 class="content-title">Patient List</h2><p class="content-subtitle">View and manage all patient records</p></div><!--List Controls--><div class="card"><div class="card-body"><div class="list-controls"><!--Search and Filter--><div class="controls-row"><div class="search-group"><input type="text" id="quick-search" class="form-control" placeholder="Quick search..." autocomplete="off"><button type="button" class="btn btn-secondary" id="clear-search">Clear</button></div><div class="filter-group"><select id="gender-filter" class="form-control"><option value="">All Genders</option><option value="male">Male</option><option value="female">Female</option><option value="other">Other</option></select><input type="number" id="age-min" class="form-control" placeholder="Min age" min="0" max="150"><input type="number" id="age-max" class="form-control" placeholder="Max age" min="0" max="150"></div><div class="view-options"><button type="button" class="btn btn-secondary" id="toggle-virtual-scroll"><span id="virtual-scroll-text">Enable Virtual Scroll</span></button><select id="page-size" class="form-control"><option value="10">10 per page</option><option value="20" selected>20 per page</option><option value="50">50 per page</option><option value="100">100 per page</option></select></div></div><!--Sort Options--><div class="controls-row"><div class="sort-group"><label>Sort by:</label><select id="sort-by" class="form-control"><option value="lastName">Last Name</option><option value="firstName">First Name</option><option value="age">Age</option><option value="createdAt">Date Added</option><option value="updatedAt">Last Modified</option></select><select id="sort-order" class="form-control"><option value="asc">Ascending</option><option value="desc">Descending</option></select></div><div class="stats-group"><span class="stats-text" id="list-stats">Loading patients...</span></div></div></div></div></div><!--Patient List--><div class="card"><div class="card-header"><h3 class="card-title">Patients</h3><div class="card-actions"><button type="button" class="btn btn-primary" id="refresh-list">Refresh</button></div></div><div class="card-body"><!--Virtual Scroll Container--><div id="virtual-scroll-container" class="virtual-scroll-container" style="display: none;"><div id="virtual-scroll-content" class="virtual-scroll-content"><!--Virtual scroll items will be rendered here--></div></div><!--Regular List Container--><div id="patient-list-content" class="patient-list-content">${this.renderPatientList()}</div><!--Pagination--><div id="pagination-container" class="pagination-container">${this.renderPagination()}</div></div></div></div>`;} renderPatientList(){if(this.isLoading){return `<div class="loading-container"><div class="loading-spinner"></div><p>Loading patients...</p></div>`;} if(this.allPatients.length===0){return `<div class="empty-state"><div class="empty-state-icon">👥</div><h3>No patients found</h3><p>No patients match your current filters.</p><button class="btn btn-primary" onclick="window.app.navigateToRoute('create-patient')">Create First Patient</button></div>`;} const startIndex=(this.currentPage-1)*this.pageSize;const endIndex=Math.min(startIndex+this.pageSize,this.allPatients.length);const pageItems=this.allPatients.slice(startIndex,endIndex);return `<div class="patient-list">${pageItems.map((patient,index)=>this.renderPatientItem(patient,startIndex+index)).join('')}</div>`;} renderPatientItem(patient,index){const age=patient.age||'Unknown';const gender=patient.gender||'Not specified';const residence=patient.placeOfResidence||'Not specified';const lastVisit=patient.lastVisitDate ? new Date(patient.lastVisitDate).toLocaleDateString(): 'No visits recorded';const createdDate=new Date(patient.createdAt).toLocaleDateString();return `<div class="patient-item" data-patient-id="${patient.id}" data-index="${index}"><div class="patient-item-content"><div class="patient-main-info"><h4 class="patient-name">${patient.fullName}</h4><div class="patient-meta"><span class="meta-item"><strong>Age:</strong>${age}</span><span class="meta-item"><strong>Gender:</strong>${gender}</span><span class="meta-item"><strong>Residence:</strong>${residence}</span></div></div><div class="patient-secondary-info"><div class="info-row"><span class="info-label">Last Visit:</span><span class="info-value">${lastVisit}</span></div><div class="info-row"><span class="info-label">Added:</span><span class="info-value">${createdDate}</span></div></div><div class="patient-actions"><button class="btn btn-sm btn-primary view-btn" data-patient-id="${patient.id}" onclick="patientListView.handlePatientSelect('${patient.id}')">View</button><button class="btn btn-sm btn-secondary edit-btn" data-patient-id="${patient.id}" onclick="patientListView.editPatient('${patient.id}')">Edit</button></div></div></div>`;} renderPagination(){if(this.virtualScrolling.enabled||this.totalPages<=1){return '';} const startPage=Math.max(1,this.currentPage-2);const endPage=Math.min(this.totalPages,this.currentPage+2);const pages=[];pages.push(`<button class="btn btn-secondary pagination-btn ${this.currentPage===1 ? 'disabled' : ''}" data-page="${this.currentPage-1}" ${this.currentPage===1 ? 'disabled' : ''}>Previous</button>`);if(startPage>1){pages.push(`<button class="btn btn-secondary pagination-btn" data-page="1">1</button>`);if(startPage>2){pages.push('<span class="pagination-ellipsis">...</span>');}} for(let i=startPage;i<=endPage;i++){pages.push(`<button class="btn ${i===this.currentPage ? 'btn-primary' : 'btn-secondary'} pagination-btn" data-page="${i}">${i}</button>`);} if(endPage<this.totalPages){if(endPage<this.totalPages-1){pages.push('<span class="pagination-ellipsis">...</span>');} pages.push(`<button class="btn btn-secondary pagination-btn" data-page="${this.totalPages}">${this.totalPages}</button>`);} pages.push(`<button class="btn btn-secondary pagination-btn ${this.currentPage===this.totalPages ? 'disabled' : ''}" data-page="${this.currentPage+1}" ${this.currentPage===this.totalPages ? 'disabled' : ''}>Next</button>`);return `<div class="pagination"><div class="pagination-info">Showing ${(this.currentPage-1)*this.pageSize+1} to ${Math.min(this.currentPage*this.pageSize,this.allPatients.length)} of ${this.allPatients.length} patients</div><div class="pagination-controls">${pages.join('')}</div></div>`;} async initialize(){try {this.setupEventListeners();await this.loadPatients();log('PatientListView initialized','info');} catch(error){log(`Failed to initialize PatientListView: ${error.message}`,'error');this.showError('Failed to load patient list');}} setupEventListeners(){const quickSearch=document.getElementById('quick-search');if(quickSearch){quickSearch.addEventListener('input',(e)=>{if(this.performanceOptimizer){this.performanceOptimizer.debounce('quick-search',()=>{this.handleQuickSearch(e.target.value);},300);} else {setTimeout(()=>this.handleQuickSearch(e.target.value),300);}});} const clearSearch=document.getElementById('clear-search');if(clearSearch){clearSearch.addEventListener('click',()=>{if(quickSearch)quickSearch.value='';this.handleQuickSearch('');});} const genderFilter=document.getElementById('gender-filter');const ageMin=document.getElementById('age-min');const ageMax=document.getElementById('age-max');[genderFilter,ageMin,ageMax].forEach(element=>{if(element){element.addEventListener('change',this.handleFilterChange);}});const sortBy=document.getElementById('sort-by');const sortOrder=document.getElementById('sort-order');if(sortBy)sortBy.addEventListener('change',this.handleSortChange);if(sortOrder)sortOrder.addEventListener('change',this.handleSortChange);const pageSize=document.getElementById('page-size');if(pageSize){pageSize.addEventListener('change',(e)=>{this.pageSize=parseInt(e.target.value);this.currentPage=1;this.updateDisplay();});} const toggleVirtualScroll=document.getElementById('toggle-virtual-scroll');if(toggleVirtualScroll){toggleVirtualScroll.addEventListener('click',this.toggleVirtualScrolling.bind(this));} const refreshBtn=document.getElementById('refresh-list');if(refreshBtn){refreshBtn.addEventListener('click',()=>this.loadPatients(true));} document.addEventListener('click',(e)=>{if(e.target.classList.contains('pagination-btn')&&!e.target.disabled){const page=parseInt(e.target.dataset.page);if(page&&page!==this.currentPage){this.handlePageChange(page);}}});const virtualContainer=document.getElementById('virtual-scroll-container');if(virtualContainer){virtualContainer.addEventListener('scroll',this.handleScroll);}} async loadPatients(forceRefresh=false){try {this.isLoading=true;this.updateDisplay();const operationId='load-patients';if(this.performanceOptimizer){this.performanceOptimizer.showLoadingIndicator(operationId,'Loading patients...');} this.allPatients=await this.patientManager.getAllPatients();this.applyFiltersAndSort();this.totalPages=Math.ceil(this.allPatients.length/this.pageSize);this.isLoading=false;if(this.performanceOptimizer){this.performanceOptimizer.hideLoadingIndicator(operationId);} this.updateDisplay();this.updateStats();log(`Loaded ${this.allPatients.length} patients`,'info');} catch(error){this.isLoading=false;log(`Failed to load patients: ${error.message}`,'error');this.showError('Failed to load patients');}} async handleQuickSearch(searchTerm){try {if(!searchTerm.trim()){await this.loadPatients();return;} const operationId='quick-search';if(this.performanceOptimizer){this.performanceOptimizer.showLoadingIndicator(operationId,'Searching...');this.allPatients=await this.performanceOptimizer.optimizedSearch(searchTerm);} else {this.allPatients=await this.patientManager.searchPatients(searchTerm);} this.currentPage=1;this.totalPages=Math.ceil(this.allPatients.length/this.pageSize);if(this.performanceOptimizer){this.performanceOptimizer.hideLoadingIndicator(operationId);} this.updateDisplay();this.updateStats();} catch(error){log(`Quick search failed: ${error.message}`,'error');this.showError('Search failed');}} handleFilterChange(){const genderFilter=document.getElementById('gender-filter');const ageMin=document.getElementById('age-min');const ageMax=document.getElementById('age-max');this.filterOptions={gender: genderFilter?.value||'',ageRange:{min: ageMin?.value ? parseInt(ageMin.value): '',max: ageMax?.value ? parseInt(ageMax.value): ''}};this.currentPage=1;this.applyFiltersAndSort();this.updateDisplay();this.updateStats();} handleSortChange(){const sortBy=document.getElementById('sort-by');const sortOrder=document.getElementById('sort-order');this.sortBy=sortBy?.value||'lastName';this.sortOrder=sortOrder?.value||'asc';this.applyFiltersAndSort();this.updateDisplay();} applyFiltersAndSort(){let filteredPatients=[...this.allPatients];if(this.filterOptions.gender){filteredPatients=filteredPatients.filter(patient=>patient.gender===this.filterOptions.gender);} if(this.filterOptions.ageRange.min!==''){filteredPatients=filteredPatients.filter(patient=>patient.age>=this.filterOptions.ageRange.min);} if(this.filterOptions.ageRange.max!==''){filteredPatients=filteredPatients.filter(patient=>patient.age<=this.filterOptions.ageRange.max);} filteredPatients.sort((a,b)=>{let aValue=a[this.sortBy];let bValue=b[this.sortBy];if(this.sortBy==='createdAt'||this.sortBy==='updatedAt'){aValue=new Date(aValue);bValue=new Date(bValue);} else if(typeof aValue==='string'){aValue=aValue.toLowerCase();bValue=bValue.toLowerCase();} let comparison=0;if(aValue<bValue)comparison=-1;if(aValue>bValue)comparison=1;return this.sortOrder==='desc' ?-comparison : comparison;});this.allPatients=filteredPatients;this.totalPages=Math.ceil(this.allPatients.length/this.pageSize);} handlePageChange(page){if(page<1||page>this.totalPages)return;this.currentPage=page;this.updateDisplay();const listContainer=document.getElementById('patient-list-content');if(listContainer){listContainer.scrollTop=0;}} toggleVirtualScrolling(){this.virtualScrolling.enabled=!this.virtualScrolling.enabled;const virtualContainer=document.getElementById('virtual-scroll-container');const regularContainer=document.getElementById('patient-list-content');const paginationContainer=document.getElementById('pagination-container');const toggleBtn=document.getElementById('virtual-scroll-text');if(this.virtualScrolling.enabled){virtualContainer.style.display='block';regularContainer.style.display='none';paginationContainer.style.display='none';toggleBtn.textContent='Disable Virtual Scroll';this.setupVirtualScrolling();} else {virtualContainer.style.display='none';regularContainer.style.display='block';paginationContainer.style.display='block';toggleBtn.textContent='Enable Virtual Scroll';this.updateDisplay();}} setupVirtualScrolling(){if(!this.performanceOptimizer)return;const lazyConfig=this.performanceOptimizer.setupLazyLoading(this.allPatients,{itemHeight: this.virtualScrolling.itemHeight,bufferSize: 5});this.virtualScrolling.totalHeight=lazyConfig.getTotalHeight();this.updateVirtualScroll();} handleScroll(event){if(!this.virtualScrolling.enabled||!this.performanceOptimizer)return;const container=event.target;this.virtualScrolling.scrollTop=container.scrollTop;this.virtualScrolling.containerHeight=container.clientHeight;if(this.scrollTimeout){clearTimeout(this.scrollTimeout);} this.scrollTimeout=setTimeout(()=>{this.updateVirtualScroll();},16);} updateVirtualScroll(){if(!this.performanceOptimizer)return;const lazyConfig=this.performanceOptimizer.setupLazyLoading(this.allPatients,{itemHeight: this.virtualScrolling.itemHeight});const visibleData=lazyConfig.getVisibleItems(this.virtualScrolling.scrollTop,this.virtualScrolling.containerHeight);const content=document.getElementById('virtual-scroll-content');if(content){content.style.height=`${this.virtualScrolling.totalHeight} px`;content.style.paddingTop=`${visibleData.startIndex*this.virtualScrolling.itemHeight} px`;content.innerHTML=visibleData.items .map((patient,index)=>this.renderPatientItem(patient,visibleData.startIndex+index)).join('');}} updateDisplay(){const listContent=document.getElementById('patient-list-content');const paginationContainer=document.getElementById('pagination-container');if(listContent){listContent.innerHTML=this.renderPatientList();} if(paginationContainer){paginationContainer.innerHTML=this.renderPagination();}} updateStats(){const statsElement=document.getElementById('list-stats');if(statsElement){const total=this.allPatients.length;const showing=this.virtualScrolling.enabled ? total : Math.min(this.pageSize,total-(this.currentPage-1)*this.pageSize);statsElement.textContent=`Showing ${showing} of ${total} patients`;}} async handlePatientSelect(patientId){try {log(`Patient selected: ${patientId}`,'info');if(window.app&&window.app.components.uiRouter){window.app.components.uiRouter.navigateTo('patient-detail',{patientId});} else {window.app.navigateToRoute('patient-detail',{patientId});}} catch(error){log(`Failed to select patient: ${error.message}`,'error');this.showError('Failed to load patient details');}} editPatient(patientId){try {if(window.app&&window.app.components.uiRouter){window.app.components.uiRouter.navigateTo('edit-patient',{patientId});} else {window.app.navigateToRoute('edit-patient',{patientId});}} catch(error){log(`Failed to edit patient: ${error.message}`,'error');this.showError('Failed to open patient editor');}} showError(message){if(window.app&&window.app.showToast){window.app.showToast(message,'error');} else {alert(message);}} async refresh(){await this.loadPatients(true);} getState(){return {currentPage: this.currentPage,pageSize: this.pageSize,sortBy: this.sortBy,sortOrder: this.sortOrder,filterOptions: this.filterOptions,virtualScrollingEnabled: this.virtualScrolling.enabled,totalPatients: this.allPatients.length};} destroy(){if(this.scrollTimeout){clearTimeout(this.scrollTimeout);} const virtualContainer=document.getElementById('virtual-scroll-container');if(virtualContainer){virtualContainer.removeEventListener('scroll',this.handleScroll);} log('PatientListView destroyed','info');}} if(typeof module!=='undefined'&&module.exports){module.exports=PatientListView;} class PatientDetailView {constructor(patient,patientManager=null,uiRouter=null){this.patient=patient;this.patientManager=patientManager;this.uiRouter=uiRouter;this.isEditMode=false;this.formManager=null;this.originalPatientData=null;this.handleEdit=this.handleEdit.bind(this);this.handleDelete=this.handleDelete.bind(this);this.handleBack=this.handleBack.bind(this);this.handleSave=this.handleSave.bind(this);this.handleCancelEdit=this.handleCancelEdit.bind(this);this.toggleEditMode=this.toggleEditMode.bind(this);} render(){if(!this.patient){return this.renderNotFound();} if(this.isEditMode){return this.renderEditMode();} else {return this.renderViewMode();}} renderViewMode(){return `<div class="patient-detail-container"><div class="content-header"><div class="content-header-actions"><button class="btn btn-secondary back-button" onclick="patientDetailView.handleBack()">← Back to Search</button><div class="patient-actions"><button class="btn btn-primary edit-button" onclick="patientDetailView.handleEdit()">Edit Patient</button><button class="btn btn-danger delete-button" onclick="patientDetailView.handleDelete()">Delete Patient</button></div></div><h2 class="content-title">${this.patient.getFullName()}</h2><p class="content-subtitle">Patient Record Details</p></div><div class="patient-detail-content"><!--Basic Information--><div class="card patient-info-card"><div class="card-header"><h3 class="card-title">Basic Information</h3></div><div class="card-body"><div class="patient-info-grid"><div class="info-item"><label class="info-label">Full Name:</label><span class="info-value">${this.patient.getFullName()}</span></div><div class="info-item"><label class="info-label">Age:</label><span class="info-value">${this.patient.age||'Not specified'}</span></div><div class="info-item"><label class="info-label">Date of Birth:</label><span class="info-value">${this.formatDate(this.patient.dateOfBirth)||'Not specified'}</span></div><div class="info-item"><label class="info-label">Gender:</label><span class="info-value">${this.formatGender(this.patient.gender)}</span></div><div class="info-item"><label class="info-label">Place of Residence:</label><span class="info-value">${this.patient.placeOfResidence||'Not specified'}</span></div><div class="info-item"><label class="info-label">Patient ID:</label><span class="info-value patient-id">${this.patient.id}</span></div></div></div></div><!--Visit History--><div class="card visits-card"><div class="card-header"><h3 class="card-title">Visit History</h3><span class="visits-count">${this.patient.visits ? this.patient.visits.length : 0} visit${this.patient.visits&&this.patient.visits.length!==1 ? 's' : ''}</span></div><div class="card-body">${this.renderVisitHistory()}</div></div><!--Record Information--><div class="card record-info-card"><div class="card-header"><h3 class="card-title">Record Information</h3></div><div class="card-body"><div class="record-info-grid"><div class="info-item"><label class="info-label">Created:</label><span class="info-value">${this.formatDateTime(this.patient.createdAt)}</span></div><div class="info-item"><label class="info-label">Last Updated:</label><span class="info-value">${this.formatDateTime(this.patient.updatedAt)}</span></div></div></div></div></div></div>`;} renderEditMode(){if(!this.formManager){this.formManager=new FormManager();} const formId=`edit-patient-${this.patient.id}`;return `<div class="patient-detail-container edit-mode"><div class="content-header"><div class="content-header-actions"><button class="btn btn-secondary back-button" onclick="patientDetailView.handleBack()">← Back to Search</button><div class="patient-actions"><button class="btn btn-success save-button" onclick="patientDetailView.handleSave()">Save Changes</button><button class="btn btn-secondary cancel-edit-button" onclick="patientDetailView.handleCancelEdit()">Cancel Edit</button></div></div><h2 class="content-title">Edit Patient: ${this.patient.getFullName()}</h2><p class="content-subtitle">Modify patient record information</p><div class="unsaved-changes-indicator" id="unsaved-changes-indicator" style="display: none;"><span class="indicator-icon">⚠️</span><span class="indicator-text">You have unsaved changes</span></div></div><div class="patient-edit-content"><div class="card"><div class="card-header"><h3 class="card-title">Edit Patient Information</h3></div><div class="card-body">${this.formManager.renderPatientForm(formId,this.patient.toJSON())}</div></div></div></div>`;} renderVisitHistory(){if(!this.patient.visits||this.patient.visits.length===0){return `<div class="no-visits-message"><div class="no-visits-icon">📅</div><h4>No visits recorded</h4><p>This patient has no visit history on record.</p></div>`;} const sortedVisits=[...this.patient.visits].sort((a,b)=>{const dateA=new Date(a.visitDate);const dateB=new Date(b.visitDate);return dateB-dateA;});return `<div class="visits-list">${sortedVisits.map((visit,index)=>this.renderVisitItem(visit,index)).join('')}</div>`;} renderVisitItem(visit,index){return `<div class="visit-detail-item"><div class="visit-detail-header"><h4 class="visit-detail-title">Visit ${index+1}-${this.formatDate(visit.visitDate)}</h4><span class="visit-detail-date">${this.getRelativeDate(visit.visitDate)}</span></div><div class="visit-detail-content"><div class="visit-detail-section"><label class="visit-detail-label">Medications Prescribed:</label><div class="visit-detail-value">${visit.medications ? `<p class="medication-text">${this.formatText(visit.medications)}</p>` : '<p class="no-data">No medications recorded</p>'}</div></div><div class="visit-detail-section"><label class="visit-detail-label">Observations:</label><div class="visit-detail-value">${visit.observations ? `<p class="observation-text">${this.formatText(visit.observations)}</p>` : '<p class="no-data">No observations recorded</p>'}</div></div>${visit.additionalComments ? `<div class="visit-detail-section"><label class="visit-detail-label">Additional Comments:</label><div class="visit-detail-value"><p class="comment-text">${this.formatText(visit.additionalComments)}</p></div></div>` : ''}</div></div>`;} renderNotFound(){return `<div class="patient-not-found"><div class="card"><div class="card-body text-center"><div class="not-found-icon">❌</div><h3>Patient Not Found</h3><p>The requested patient record could not be found.</p><button class="btn btn-primary" onclick="patientDetailView.handleBack()">Back to Search</button></div></div></div>`;} initialize(){log('PatientDetailView initialized','info');if(this.isEditMode&&!this.formManager){this.formManager=new FormManager();const formId=`edit-patient-${this.patient.id}`;setTimeout(()=>{this.formManager.initializeForm(formId);this.setupChangeTracking(formId);},100);} this.setupKeyboardShortcuts();} setupKeyboardShortcuts(){const handleKeyDown=(event)=>{if(!document.querySelector('.patient-detail-container')){return;} if(event.ctrlKey||event.metaKey){switch(event.key){case 's': event.preventDefault();if(this.isEditMode){this.handleSave();} break;case 'e': event.preventDefault();if(!this.isEditMode){this.handleEdit();} break;case 'Escape': event.preventDefault();if(this.isEditMode){this.handleCancelEdit();} break;}}};document.addEventListener('keydown',handleKeyDown);this.keydownHandler=handleKeyDown;} handleEdit(){try {log(`Edit patient requested: ${this.patient.id}`,'info');this.toggleEditMode(true);} catch(error){log(`Failed to edit patient: ${error.message}`,'error');this.showToast('Failed to open edit form','error');}} async handleDelete(){try {const patientName=this.patient.getFullName();log(`Delete patient requested: ${this.patient.id}`,'info');const confirmed=await this.showDeleteConfirmationDialog(patientName);if(!confirmed){return;} if(!this.patientManager){throw new Error('Patient manager not available');} this.showDeletionLoadingState();const result=await this.patientManager.deletePatient(this.patient.id);if(result.success){this.hideDeletionLoadingState();this.showDeletionSuccessDialog(patientName);setTimeout(()=>{this.handleBack();},2000);} else {throw new Error(result.message||'Failed to delete patient');}} catch(error){log(`Failed to delete patient: ${error.message}`,'error');this.hideDeletionLoadingState();this.showToast('Failed to delete patient. Please try again.','error');}} handleBack(){try {log('Back to search requested','info');if(this.isEditMode&&this.hasUnsavedChanges()){const confirmed=confirm('You have unsaved changes. Are you sure you want to leave without saving?\n\n'+'Your changes will be lost.');if(!confirmed){return;}} if(window.app){window.app.navigateToRoute('search-patients');} else if(this.uiRouter){this.uiRouter.navigateTo('search-patients');} else {const modalContainer=document.getElementById('modal-container');if(modalContainer){modalContainer.classList.add('hidden');}}} catch(error){log(`Failed to navigate back: ${error.message}`,'error');}} toggleEditMode(editMode){try {this.isEditMode=editMode;if(editMode){this.originalPatientData=deepClone(this.patient.toJSON());log('Entering edit mode','info');} else {this.originalPatientData=null;log('Exiting edit mode','info');} this.rerender();if(editMode&&this.formManager){const formId=`edit-patient-${this.patient.id}`;setTimeout(()=>{this.formManager.initializeForm(formId);this.setupChangeTracking(formId);},100);}} catch(error){log(`Failed to toggle edit mode: ${error.message}`,'error');this.showToast('Failed to toggle edit mode','error');}} async handleSave(){try {log('Save patient changes requested','info');if(!this.formManager){throw new Error('Form manager not available');} const formId=`edit-patient-${this.patient.id}`;const validation=this.formManager.validateForm(formId);if(!validation.isValid){this.showToast('Please fix the validation errors before saving','error');return;} const formData=this.formManager.getFormData(formId);this.showLoadingState('Saving changes...');const result=await this.patientManager.updatePatient(this.patient.id,formData);if(result.success){this.patient=new Patient(result.patient);this.formManager.markFormAsSaved(formId);this.toggleEditMode(false);this.showToast('Patient record updated successfully','success');log(`Patient ${this.patient.getFullName()} updated successfully`,'info');} else {throw new Error(result.message||'Failed to update patient');}} catch(error){log(`Failed to save patient changes: ${error.message}`,'error');this.showToast('Failed to save changes. Please try again.','error');} finally {this.hideLoadingState();}} handleCancelEdit(){try {log('Cancel edit requested','info');if(this.hasUnsavedChanges()){const confirmed=confirm('You have unsaved changes. Are you sure you want to cancel?\n\n'+'Your changes will be lost.');if(!confirmed){return;}} this.toggleEditMode(false);} catch(error){log(`Failed to cancel edit: ${error.message}`,'error');this.showToast('Failed to cancel edit','error');}} hasUnsavedChanges(){if(!this.isEditMode||!this.formManager||!this.originalPatientData){return false;} const formId=`edit-patient-${this.patient.id}`;return this.formManager.hasUnsavedChanges(formId);} setupChangeTracking(formId){if(!this.formManager)return;const form=document.getElementById(formId);if(!form)return;const inputs=form.querySelectorAll('input,select,textarea');inputs.forEach(input=>{input.addEventListener('input',()=>{this.updateUnsavedChangesIndicator();});input.addEventListener('change',()=>{this.updateUnsavedChangesIndicator();});});} updateUnsavedChangesIndicator(){const indicator=document.getElementById('unsaved-changes-indicator');if(!indicator)return;if(this.hasUnsavedChanges()){indicator.style.display='flex';} else {indicator.style.display='none';}} rerender(){const container=document.querySelector('.patient-detail-container');if(container&&container.parentElement){container.parentElement.innerHTML=this.render();}} showLoadingState(message='Loading...'){const saveButton=document.querySelector('.save-button');if(saveButton){saveButton.disabled=true;saveButton.innerHTML=`<span class="loading-spinner-small"></span>${message}`;}} hideLoadingState(){const saveButton=document.querySelector('.save-button');if(saveButton){saveButton.disabled=false;saveButton.innerHTML='Save Changes';}} formatDate(date){if(!date)return '';try {const dateObj=new Date(date);return dateObj.toLocaleDateString('en-US',{year: 'numeric',month: 'long',day: 'numeric'});} catch(error){return date.toString();}} formatDateTime(dateTime){if(!dateTime)return 'Not available';try {const dateObj=new Date(dateTime);return dateObj.toLocaleString('en-US',{year: 'numeric',month: 'short',day: 'numeric',hour: '2-digit',minute: '2-digit'});} catch(error){return dateTime.toString();}} getRelativeDate(date){if(!date)return '';try {const dateObj=new Date(date);const now=new Date();const diffTime=now-dateObj;const diffDays=Math.floor(diffTime/(1000*60*60*24));if(diffDays===0){return 'Today';} else if(diffDays===1){return 'Yesterday';} else if(diffDays<7){return `${diffDays} days ago`;} else if(diffDays<30){const weeks=Math.floor(diffDays/7);return `${weeks} week${weeks!==1 ? 's' : ''} ago`;} else if(diffDays<365){const months=Math.floor(diffDays/30);return `${months} month${months!==1 ? 's' : ''} ago`;} else {const years=Math.floor(diffDays/365);return `${years} year${years!==1 ? 's' : ''} ago`;}} catch(error){return '';}} formatGender(gender){if(!gender)return 'Not specified';const genderMap={'male': 'Male','female': 'Female','other': 'Other','m': 'Male','f': 'Female'};return genderMap[gender.toLowerCase()]||gender;} formatText(text){if(!text)return '';return text .replace(/\n/g,'<br>').replace(/\t/g,'&nbsp;&nbsp;&nbsp;&nbsp;');} async showDeleteConfirmationDialog(patientName){return new Promise((resolve)=>{const modalContainer=document.getElementById('modal-container');if(!modalContainer){resolve(confirm(`Are you sure you want to delete the patient record for ${patientName}?\n\n`+'This action cannot be undone and will permanently remove all patient data including visit history.'));return;} modalContainer.innerHTML=`<div class="modal"><div class="modal-header"><h3 class="modal-title">⚠️ Confirm Patient Deletion</h3></div><div class="modal-body"><p><strong>Are you sure you want to delete the patient record for:</strong></p><p class="patient-name-highlight">${patientName}</p><div class="warning-message"><div class="warning-icon">⚠️</div><div class="warning-text"><p><strong>This action cannot be undone!</strong></p><p>This will permanently remove:</p><ul><li>All patient information</li><li>Complete visit history</li><li>All medications and observations</li><li>Any additional comments</li></ul></div></div></div><div class="modal-footer"><button class="btn btn-secondary cancel-delete-btn">Cancel</button><button class="btn btn-danger confirm-delete-btn">Delete Patient</button></div></div>`;modalContainer.classList.remove('hidden');const cancelBtn=modalContainer.querySelector('.cancel-delete-btn');const confirmBtn=modalContainer.querySelector('.confirm-delete-btn');const cleanup=()=>{modalContainer.classList.add('hidden');modalContainer.innerHTML='';};cancelBtn.addEventListener('click',()=>{cleanup();resolve(false);});confirmBtn.addEventListener('click',()=>{cleanup();resolve(true);});const handleEscape=(event)=>{if(event.key==='Escape'){document.removeEventListener('keydown',handleEscape);cleanup();resolve(false);}};document.addEventListener('keydown',handleEscape);});} showDeletionSuccessDialog(patientName){const modalContainer=document.getElementById('modal-container');if(!modalContainer){this.showToast(`Patient ${patientName} has been deleted successfully`,'success');return;} modalContainer.innerHTML=`<div class="modal"><div class="modal-header"><h3 class="modal-title">✅ Patient Deleted Successfully</h3></div><div class="modal-body"><div class="success-message"><div class="success-icon">✅</div><div class="success-text"><p><strong>Patient record has been successfully deleted:</strong></p><p class="patient-name-highlight">${patientName}</p><p>All associated data has been permanently removed from the system.</p></div></div></div><div class="modal-footer"><button class="btn btn-primary ok-btn">OK</button></div></div>`;modalContainer.classList.remove('hidden');const okBtn=modalContainer.querySelector('.ok-btn');const cleanup=()=>{modalContainer.classList.add('hidden');modalContainer.innerHTML='';};okBtn.addEventListener('click',cleanup);setTimeout(cleanup,3000);} showDeletionLoadingState(){const deleteButton=document.querySelector('.delete-button');if(deleteButton){deleteButton.disabled=true;deleteButton.innerHTML=`<span class="loading-spinner-small"></span>Deleting... `;}} hideDeletionLoadingState(){const deleteButton=document.querySelector('.delete-button');if(deleteButton){deleteButton.disabled=false;deleteButton.innerHTML='Delete Patient';}} showToast(message,type='info'){if(window.app&&window.app.showToast){window.app.showToast(message,type);} else {alert(message);}} destroy(){log('PatientDetailView destroyed','info');if(this.keydownHandler){document.removeEventListener('keydown',this.keydownHandler);this.keydownHandler=null;} if(this.formManager){const formId=`edit-patient-${this.patient.id}`;this.formManager.destroyForm(formId);this.formManager=null;} this.originalPatientData=null;this.isEditMode=false;}} if(typeof module!=='undefined'&&module.exports){module.exports=PatientDetailView;} class UIRouter {constructor(){this.routes=new Map();this.currentRoute=null;this.currentParams={};this.navigationHistory=[];this.maxHistorySize=50;this.handleHashChange=this.handleHashChange.bind(this);this.handlePopState=this.handlePopState.bind(this);this.initialize();} initialize(){window.addEventListener('hashchange',this.handleHashChange);window.addEventListener('popstate',this.handlePopState);console.log('UIRouter initialized');} registerRoute(path,handler,options={}){this.routes.set(path,{handler,requiresAuth: options.requiresAuth!==false,title: options.title||path,beforeEnter: options.beforeEnter,beforeLeave: options.beforeLeave});console.log(`Route registered: ${path}`);} async navigateTo(route,params={},options={}){try {console.log(`Navigating to: ${route}`,params);if(this.currentRoute&&!options.force){const canLeave=await this.checkCanLeaveCurrentRoute();if(!canLeave){console.log('Navigation cancelled by user');return false;}} const routeConfig=this.routes.get(route);if(!routeConfig){console.error(`Route not found: ${route}`);this.navigateTo('not-found',{originalRoute: route});return false;} if(routeConfig.requiresAuth&&!this.isAuthenticated()){console.log('Authentication required,redirecting to login');this.navigateTo('login',{returnTo: route,returnParams: params});return false;} if(routeConfig.beforeEnter){const canEnter=await routeConfig.beforeEnter(route,params);if(!canEnter){console.log('Navigation blocked by beforeEnter hook');return false;}} this.addToHistory(this.currentRoute,this.currentParams);const previousRoute=this.currentRoute;this.currentRoute=route;this.currentParams={...params};this.updateUrlHash(route,params);this.updateNavigationUI(route);await this.executeRouteHandler(routeConfig,route,params,previousRoute);this.updatePageTitle(routeConfig.title,params);console.log(`Navigation completed: ${route}`);return true;} catch(error){console.error('Navigation error:',error);this.handleNavigationError(error,route,params);return false;}} getCurrentRoute(){return {route: this.currentRoute,params:{...this.currentParams},fullPath: this.getFullPath()};} goBack(){if(this.navigationHistory.length>0){const previous=this.navigationHistory.pop();this.navigateTo(previous.route,previous.params,{skipHistory: true});} else {this.navigateTo('dashboard');}} async checkCanLeaveCurrentRoute(){const hasUnsavedChanges=await this.checkUnsavedChanges();if(!hasUnsavedChanges){return true;} const changeDetails=this.getUnsavedChangesDetails();return await this.showUnsavedChangesDialog(changeDetails);} async checkUnsavedChanges(){if(window.app&&window.app.components.changeTracker){return window.app.components.changeTracker.hasUnsavedChanges();} if(window.app&&window.app.components.formManager){const forms=window.app.components.formManager.forms;return Object.keys(forms).some(formId=>window.app.components.formManager.hasUnsavedChanges(formId));} return false;} getUnsavedChangesDetails(){if(window.app&&window.app.components.changeTracker){return window.app.components.changeTracker.getChangeDetails();} return {hasChanges: false,totalChanges: 0,forms: [],components: []};} async showUnsavedChangesDialog(changeDetails){if(window.app&&window.app.components.modalManager){const choice=await window.app.components.modalManager.showNavigationConfirmation({changesDetails: changeDetails});switch(choice){case 'save-and-continue': await this.saveAllChanges();return true;case 'continue-without-saving': this.discardAllChanges();return true;case 'cancel': default: return false;}} return confirm('You have unsaved changes. Are you sure you want to leave this page? '+'Your changes will be lost.');} async saveAllChanges(){if(window.app&&window.app.components.changeTracker){await window.app.components.changeTracker.saveAllChanges();}} discardAllChanges(){if(window.app&&window.app.components.changeTracker){window.app.components.changeTracker.discardAllChanges();}} handleHashChange(event){console.log('Hash changed:',window.location.hash);this.handleRouteFromHash();} handlePopState(event){console.log('Pop state event:',event.state);this.handleRouteFromHash();} handleRouteFromHash(){const hash=window.location.hash.replace('#','');const [route,queryString]=hash.split('?');const params={};if(queryString){const urlParams=new URLSearchParams(queryString);for(const [key,value] of urlParams){params[key]=value;}} if(route!==this.currentRoute||JSON.stringify(params)!==JSON.stringify(this.currentParams)){this.navigateTo(route||'dashboard',params,{fromHashChange: true});}} updateUrlHash(route,params){let hash=route;if(Object.keys(params).length>0){const urlParams=new URLSearchParams(params);hash+='?'+urlParams.toString();} if(window.location.hash!=='#'+hash){history.replaceState({route,params},'','#'+hash);}} updateNavigationUI(route){const navLinks=document.querySelectorAll('.nav-link');navLinks.forEach(link=>{link.classList.remove('active');if(link.getAttribute('data-route')===route){link.classList.add('active');}});this.updateBreadcrumbs(route);} updateBreadcrumbs(route){const breadcrumbContainer=document.querySelector('.breadcrumb');if(!breadcrumbContainer)return;const breadcrumbs=this.generateBreadcrumbs(route);breadcrumbContainer.innerHTML=breadcrumbs.map(crumb=>`<span class="breadcrumb-item ${crumb.active ? 'active' : ''}">${crumb.text}</span>`).join('/');} generateBreadcrumbs(route){const breadcrumbs=[{text: 'Dashboard',active: false}];switch(route){case 'dashboard': breadcrumbs[0].active=true;break;case 'create-patient': breadcrumbs.push({text: 'Create Patient',active: true});break;case 'search-patients': breadcrumbs.push({text: 'Search Patients',active: true});break;case 'patient-list': breadcrumbs.push({text: 'Patient List',active: true});break;case 'patient-detail': breadcrumbs.push({text: 'Patient Details',active: true});break;default: breadcrumbs.push({text: route,active: true});} return breadcrumbs;} async executeRouteHandler(routeConfig,route,params,previousRoute){try {const mainContainer=document.querySelector('.main-container');if(mainContainer){mainContainer.classList.add('route-transitioning');} await routeConfig.handler(route,params,previousRoute);setTimeout(()=>{if(mainContainer){mainContainer.classList.remove('route-transitioning');}},300);} catch(error){console.error('Route handler error:',error);throw error;}} updatePageTitle(title,params){let pageTitle=title;Object.keys(params).forEach(key=>{pageTitle=pageTitle.replace(`{${key}}`,params[key]);});document.title=`${pageTitle}-Patient Management System`;} addToHistory(route,params){if(!route)return;this.navigationHistory.push({route,params});if(this.navigationHistory.length>this.maxHistorySize){this.navigationHistory.shift();}} getFullPath(){let path=this.currentRoute||'';if(Object.keys(this.currentParams).length>0){const urlParams=new URLSearchParams(this.currentParams);path+='?'+urlParams.toString();} return path;} isAuthenticated(){if(window.app&&window.app.components.authManager){return window.app.components.authManager.isAuthenticated();} return true;} handleNavigationError(error,route,params){console.error(`Navigation error for route ${route}:`,error);if(window.app&&window.app.components.errorHandler){window.app.components.errorHandler.handleError({type: 'NAVIGATION',message: `Failed to navigate to ${route}`,error: error,context: 'UIRouter Navigation'});} if(route!=='dashboard'){setTimeout(()=>{this.navigateTo('dashboard',{},{force: true});},1000);}} registerDefaultRoutes(){this.registerRoute('dashboard',async(route,params)=>{await this.showDashboard();},{title: 'Dashboard'});this.registerRoute('create-patient',async(route,params)=>{await this.showCreatePatient();},{title: 'Create Patient'});this.registerRoute('search-patients',async(route,params)=>{await this.showSearchPatients();},{title: 'Search Patients'});this.registerRoute('patient-list',async(route,params)=>{await this.showPatientList();},{title: 'Patient List'});this.registerRoute('patient-detail',async(route,params)=>{await this.showPatientDetail(params.patientId);},{title: 'Patient Details'});this.registerRoute('not-found',async(route,params)=>{await this.showNotFound(params.originalRoute);},{title: 'Page Not Found',requiresAuth: false});console.log('Default routes registered');} async showDashboard(){const dashboardContent=document.getElementById('dashboard-content');const dynamicContent=document.getElementById('dynamic-content');if(dashboardContent&&dynamicContent){dashboardContent.style.display='block';dynamicContent.style.display='none';}} async showCreatePatient(){const dashboardContent=document.getElementById('dashboard-content');const dynamicContent=document.getElementById('dynamic-content');if(dashboardContent&&dynamicContent){dashboardContent.style.display='none';dynamicContent.style.display='block';if(window.app&&window.app.loadCreatePatientForm){window.app.loadCreatePatientForm(dynamicContent);}}} async showSearchPatients(){const dashboardContent=document.getElementById('dashboard-content');const dynamicContent=document.getElementById('dynamic-content');if(dashboardContent&&dynamicContent){dashboardContent.style.display='none';dynamicContent.style.display='block';if(window.app&&window.app.loadPatientSearchView){window.app.loadPatientSearchView(dynamicContent);}}} async showPatientList(){const dashboardContent=document.getElementById('dashboard-content');const dynamicContent=document.getElementById('dynamic-content');if(dashboardContent&&dynamicContent){dashboardContent.style.display='none';dynamicContent.style.display='block';if(window.app&&window.app.loadPatientListView){await window.app.loadPatientListView(dynamicContent);}}} async showPatientDetail(patientId){const dashboardContent=document.getElementById('dashboard-content');const dynamicContent=document.getElementById('dynamic-content');if(dashboardContent&&dynamicContent){dashboardContent.style.display='none';dynamicContent.style.display='block';if(window.app&&window.app.loadPatientDetailView){const route=`patient-detail?patientId=${patientId}`;await window.app.loadPatientDetailView(dynamicContent,route);}}} async showNotFound(originalRoute){const dashboardContent=document.getElementById('dashboard-content');const dynamicContent=document.getElementById('dynamic-content');if(dashboardContent&&dynamicContent){dashboardContent.style.display='none';dynamicContent.style.display='block';dynamicContent.innerHTML=`<div class="card"><div class="card-body text-center"><h3>Page Not Found</h3><p>The requested page "${originalRoute||'unknown'}" could not be found.</p><button class="btn btn-primary" onclick="window.app.components.uiRouter.navigateTo('dashboard')">Go to Dashboard</button></div></div>`;}} destroy(){window.removeEventListener('hashchange',this.handleHashChange);window.removeEventListener('popstate',this.handlePopState);this.routes.clear();this.navigationHistory=[];console.log('UIRouter destroyed');}} if(typeof module!=='undefined'&&module.exports){module.exports=UIRouter;} class FormManager {constructor(){this.forms={};this.unsavedChanges={};this.validationErrors={};this.originalData={};} renderPatientForm(formId,data={}){this.originalData[formId]=deepClone(data);this.unsavedChanges[formId]=false;this.validationErrors[formId]={};const patient=data.id ? data : PATIENT_SCHEMA||{};const visits=patient.visits||[];return `<form id="${formId}" class="patient-form" novalidate><input type="hidden" name="id" value="${patient.id||''}"/><!--Personal Information Section--><div class="form-section"><h3 class="form-section-title">Personal Information</h3><div class="form-row"><div class="form-group"><label for="${formId}-firstName" class="form-label">First Name<span class="required">*</span></label><input type="text" id="${formId}-firstName" name="firstName" class="form-control" value="${patient.firstName||''}" placeholder="Enter first name" maxlength="50" required/><div class="form-error" id="${formId}-firstName-error"></div></div><div class="form-group"><label for="${formId}-lastName" class="form-label">Last Name<span class="required">*</span></label><input type="text" id="${formId}-lastName" name="lastName" class="form-control" value="${patient.lastName||''}" placeholder="Enter last name" maxlength="50" required/><div class="form-error" id="${formId}-lastName-error"></div></div></div><div class="form-row"><div class="form-group"><label for="${formId}-dateOfBirth" class="form-label">Date of Birth<span class="required">*</span></label><input type="date" id="${formId}-dateOfBirth" name="dateOfBirth" class="form-control" value="${this.formatDateForInput(patient.dateOfBirth)}" max="${this.formatDateForInput(new Date())}" required/><div class="form-error" id="${formId}-dateOfBirth-error"></div></div><div class="form-group"><label for="${formId}-age" class="form-label">Age</label><input type="number" id="${formId}-age" name="age" class="form-control" value="${patient.age||''}" min="0" max="150" readonly placeholder="Calculated from birth date"/></div></div><div class="form-row"><div class="form-group"><label for="${formId}-placeOfResidence" class="form-label">Place of Residence<span class="required">*</span></label><input type="text" id="${formId}-placeOfResidence" name="placeOfResidence" class="form-control" value="${patient.placeOfResidence||''}" placeholder="Enter place of residence" maxlength="100" required/><div class="form-error" id="${formId}-placeOfResidence-error"></div></div><div class="form-group"><label for="${formId}-gender" class="form-label">Gender<span class="required">*</span></label><select id="${formId}-gender" name="gender" class="form-control" required><option value="">Select gender</option><option value="male" ${patient.gender==='male' ? 'selected' : ''}>Male</option><option value="female" ${patient.gender==='female' ? 'selected' : ''}>Female</option><option value="other" ${patient.gender==='other' ? 'selected' : ''}>Other</option></select><div class="form-error" id="${formId}-gender-error"></div></div></div></div><!--Visits Section--><div class="form-section"><div class="form-section-header"><h3 class="form-section-title">Medical Visits</h3><button type="button" class="btn btn-secondary btn-sm add-visit-btn" data-form-id="${formId}">Add Visit</button></div><div id="${formId}-visits-container" class="visits-container">${this.renderVisits(formId,visits)}</div></div><!--Form Actions--><div class="form-actions"><button type="button" class="btn btn-secondary cancel-btn" data-form-id="${formId}">Cancel</button><button type="submit" class="btn btn-primary save-btn" data-form-id="${formId}">Save Patient</button></div></form>`;} renderVisits(formId,visits=[]){if(visits.length===0){return `<div class="no-visits-message"><p>No visits recorded yet. Click "Add Visit" to add the first visit.</p></div>`;} return visits.map((visit,index)=>this.renderVisit(formId,visit,index)).join('');} renderVisit(formId,visit,index){const visitId=visit.id||this.generateId();return `<div class="visit-item" data-visit-id="${visitId}" data-visit-index="${index}"><div class="visit-header"><h4 class="visit-title">Visit ${index+1}</h4><button type="button" class="btn btn-danger btn-sm remove-visit-btn" data-form-id="${formId}" data-visit-index="${index}">Remove</button></div><input type="hidden" name="visits[${index}][id]" value="${visitId}"/><div class="form-row"><div class="form-group"><label for="${formId}-visit-${index}-date" class="form-label">Visit Date<span class="required">*</span></label><input type="date" id="${formId}-visit-${index}-date" name="visits[${index}][visitDate]" class="form-control" value="${this.formatDateForInput(visit.visitDate)}" max="${this.formatDateForInput(new Date())}" required/><div class="form-error" id="${formId}-visit-${index}-date-error"></div></div></div><div class="form-group"><label for="${formId}-visit-${index}-medications" class="form-label">Medications Prescribed</label><textarea id="${formId}-visit-${index}-medications" name="visits[${index}][medications]" class="form-control" rows="3" placeholder="Enter medications prescribed during this visit" maxlength="1000">${visit.medications||''}</textarea><div class="form-error" id="${formId}-visit-${index}-medications-error"></div></div><div class="form-group"><label for="${formId}-visit-${index}-observations" class="form-label">Observations and Notes</label><textarea id="${formId}-visit-${index}-observations" name="visits[${index}][observations]" class="form-control" rows="4" placeholder="Enter observations and notes from this visit" maxlength="2000">${visit.observations||''}</textarea><div class="form-error" id="${formId}-visit-${index}-observations-error"></div></div><div class="form-group"><label for="${formId}-visit-${index}-comments" class="form-label">Additional Comments</label><textarea id="${formId}-visit-${index}-comments" name="visits[${index}][additionalComments]" class="form-control" rows="3" placeholder="Enter any additional comments" maxlength="1000">${visit.additionalComments||''}</textarea><div class="form-error" id="${formId}-visit-${index}-comments-error"></div></div></div>`;} formatDateForInput(date){if(!date)return '';try {const d=new Date(date);if(isNaN(d.getTime()))return '';const year=d.getFullYear();const month=String(d.getMonth()+1).padStart(2,'0');const day=String(d.getDate()).padStart(2,'0');return `${year}-${month}-${day}`;} catch(error){console.error('Error formatting date:',error);return '';}} generateId(){return 'id_'+Math.random().toString(36).substr(2,9)+'_'+Date.now();} initializeForm(formId,options={}){const form=document.getElementById(formId);if(!form)return;this.forms[formId]=form;this.setupFormEventListeners(formId);this.trackChanges(formId);this.setupRealTimeValidation(formId);this.integrateWithChangeTracker(formId,options);} integrateWithChangeTracker(formId,options={}){try {if(typeof window!=='undefined'&&window.app&&window.app.components.changeTracker){const changeTracker=window.app.components.changeTracker;let displayName=options.displayName||formId;if(formId.includes('patient')){displayName=options.displayName||'Patient Form';} changeTracker.trackForm(formId,{displayName: displayName,description: options.description||`Form: ${displayName}`,onChangeCallback:(hasChanges,trackingInfo)=>{this.unsavedChanges[formId]=hasChanges;if(options.onChangeCallback){options.onChangeCallback(hasChanges,trackingInfo);}}});console.log(`Integrated form ${formId} with change tracker`);}} catch(error){console.error('Error integrating form with change tracker:',error);}} setupFormEventListeners(formId){const form=this.forms[formId];form.addEventListener('submit',(e)=>{e.preventDefault();this.handleFormSubmit(formId);});const dobField=form.querySelector('[name="dateOfBirth"]');if(dobField){dobField.addEventListener('change',()=>{this.updateAge(formId);});} const addVisitBtn=form.querySelector('.add-visit-btn');if(addVisitBtn){addVisitBtn.addEventListener('click',()=>{this.addVisit(formId);});} form.addEventListener('click',(e)=>{if(e.target.classList.contains('remove-visit-btn')){const visitIndex=parseInt(e.target.dataset.visitIndex);this.removeVisit(formId,visitIndex);}});const cancelBtn=form.querySelector('.cancel-btn');if(cancelBtn){cancelBtn.addEventListener('click',()=>{this.handleCancel(formId);});}} updateAge(formId){const form=this.forms[formId];const dobField=form.querySelector('[name="dateOfBirth"]');const ageField=form.querySelector('[name="age"]');if(dobField&&ageField&&dobField.value){const age=this.calculateAge(dobField.value);ageField.value=age;this.checkForChanges(formId);}} calculateAge(dateOfBirth){try {const today=new Date();const birthDate=new Date(dateOfBirth);let age=today.getFullYear()-birthDate.getFullYear();const monthDiff=today.getMonth()-birthDate.getMonth();if(monthDiff<0||(monthDiff===0&&today.getDate()<birthDate.getDate())){age--;} return Math.max(0,age);} catch(error){console.error('Error calculating age:',error);return 0;}} addVisit(formId){const form=this.forms[formId];const visitsContainer=form.querySelector(`#${formId}-visits-container`);const noVisitsMessage=visitsContainer.querySelector('.no-visits-message');if(noVisitsMessage){noVisitsMessage.remove();} const existingVisits=visitsContainer.querySelectorAll('.visit-item');const visitIndex=existingVisits.length;const newVisit={id: this.generateId(),visitDate: this.formatDateForInput(new Date()),medications: '',observations: '',additionalComments: ''};const visitHtml=this.renderVisit(formId,newVisit,visitIndex);visitsContainer.insertAdjacentHTML('beforeend',visitHtml);const newVisitElement=visitsContainer.querySelector(`[data-visit-index="${visitIndex}"]`);this.setupVisitEventListeners(formId,newVisitElement,visitIndex);this.checkForChanges(formId);newVisitElement.scrollIntoView({behavior: 'smooth',block: 'center'});} removeVisit(formId,visitIndex){const form=this.forms[formId];const visitsContainer=form.querySelector(`#${formId}-visits-container`);const visitElement=visitsContainer.querySelector(`[data-visit-index="${visitIndex}"]`);if(visitElement){visitElement.remove();this.reindexVisits(formId);const remainingVisits=visitsContainer.querySelectorAll('.visit-item');if(remainingVisits.length===0){visitsContainer.innerHTML=`<div class="no-visits-message"><p>No visits recorded yet. Click "Add Visit" to add the first visit.</p></div>`;} this.checkForChanges(formId);}} reindexVisits(formId){const form=this.forms[formId];const visitsContainer=form.querySelector(`#${formId}-visits-container`);const visitElements=visitsContainer.querySelectorAll('.visit-item');visitElements.forEach((visitElement,newIndex)=>{visitElement.dataset.visitIndex=newIndex;const title=visitElement.querySelector('.visit-title');if(title){title.textContent=`Visit ${newIndex+1}`;} const inputs=visitElement.querySelectorAll('input,textarea');inputs.forEach(input=>{const name=input.name;if(name&&name.includes('visits[')){input.name=name.replace(/visits\[\d+\]/,`visits[${newIndex}]`);} const id=input.id;if(id&&id.includes('-visit-')){input.id=id.replace(/-visit-\d+-/,`-visit-${newIndex}-`);}});const labels=visitElement.querySelectorAll('label');labels.forEach(label=>{const forAttr=label.getAttribute('for');if(forAttr&&forAttr.includes('-visit-')){label.setAttribute('for',forAttr.replace(/-visit-\d+-/,`-visit-${newIndex}-`));}});const errorContainers=visitElement.querySelectorAll('.form-error');errorContainers.forEach(container=>{const id=container.id;if(id&&id.includes('-visit-')){container.id=id.replace(/-visit-\d+-/,`-visit-${newIndex}-`);}});const removeBtn=visitElement.querySelector('.remove-visit-btn');if(removeBtn){removeBtn.dataset.visitIndex=newIndex;}});} setupVisitEventListeners(formId,visitElement,visitIndex){const inputs=visitElement.querySelectorAll('input,textarea');inputs.forEach(input=>{input.addEventListener('blur',()=>{this.validateField(formId,input);});input.addEventListener('input',()=>{this.clearFieldError(formId,input);this.checkForChanges(formId);});input.addEventListener('change',()=>{this.checkForChanges(formId);});});} setupRealTimeValidation(formId){const form=this.forms[formId];const inputs=form.querySelectorAll('input,select,textarea');inputs.forEach(input=>{input.addEventListener('blur',()=>{this.validateField(formId,input);});input.addEventListener('input',()=>{this.clearFieldError(formId,input);});});} trackChanges(formId){const form=this.forms[formId];const inputs=form.querySelectorAll('input,select,textarea');inputs.forEach(input=>{input.addEventListener('input',()=>{this.checkForChanges(formId);});input.addEventListener('change',()=>{this.checkForChanges(formId);});});} checkForChanges(formId){const currentData=this.getFormData(formId);const originalData=this.originalData[formId]||{};this.unsavedChanges[formId]=!isEqual(currentData,originalData);} validateField(formId,field){const fieldName=field.name;const fieldValue=field.value.trim();const errors=[];if(field.type==='hidden')return true;try {if(field.required&&!fieldValue){errors.push('This field is required');} if(fieldValue){if(fieldName==='firstName'||fieldName==='lastName'){if(fieldValue.length<2){errors.push('Must be at least 2 characters long');} if(fieldValue.length>50){errors.push('Must be less than 50 characters');} if(!/^[a-zA-Z\s\-']+$/.test(fieldValue)){errors.push('Only letters,spaces,hyphens,and apostrophes are allowed');}} if(fieldName==='dateOfBirth'||fieldName.includes('visitDate')){const date=new Date(fieldValue);const today=new Date();today.setHours(23,59,59,999);if(isNaN(date.getTime())){errors.push('Please enter a valid date');} else if(date>today){errors.push('Date cannot be in the future');}} if(fieldName==='placeOfResidence'){if(fieldValue.length<2){errors.push('Must be at least 2 characters long');} if(fieldValue.length>100){errors.push('Must be less than 100 characters');}} if(fieldName.includes('medications')||fieldName.includes('observations')||fieldName.includes('additionalComments')){if(fieldValue.length>2000){errors.push('Text is too long(maximum 2000 characters)');}}} if(errors.length>0){this.showFieldError(formId,field,errors[0]);return false;} else {this.clearFieldError(formId,field);return true;}} catch(error){if(typeof window!=='undefined'&&window.app&&window.app.components.errorHandler){window.app.components.errorHandler.handleError({type: window.app.components.errorHandler.errorTypes.CLIENT,message: 'Error validating form field',error: error,context: `Field Validation-${formId}.${fieldName}`,formId: formId,fieldName: fieldName});} console.error('Field validation error:',error);return false;}} showFieldError(formId,field,message){field.classList.add('error');const errorId=field.id+'-error';const errorContainer=document.getElementById(errorId);if(errorContainer){errorContainer.textContent=message;errorContainer.style.display='block';} this.addFieldErrorIndicator(field);} clearFieldError(formId,field){field.classList.remove('error');field.classList.add('valid');const errorId=field.id+'-error';const errorContainer=document.getElementById(errorId);if(errorContainer){errorContainer.textContent='';errorContainer.style.display='none';} this.removeFieldErrorIndicator(field);this.addFieldSuccessIndicator(field);} addFieldErrorIndicator(field){this.removeFieldIndicators(field);const indicator=document.createElement('span');indicator.className='field-error-indicator';indicator.innerHTML='✗';indicator.setAttribute('aria-hidden','true');const parent=field.parentElement;if(parent&&parent.style.position!=='relative'){parent.style.position='relative';} parent.appendChild(indicator);} addFieldSuccessIndicator(field){if(!field.required||!field.value.trim()){return;} this.removeFieldIndicators(field);const indicator=document.createElement('span');indicator.className='field-success-indicator';indicator.innerHTML='✓';indicator.setAttribute('aria-hidden','true');const parent=field.parentElement;if(parent&&parent.style.position!=='relative'){parent.style.position='relative';} parent.appendChild(indicator);} removeFieldIndicators(field){const parent=field.parentElement;if(parent){const indicators=parent.querySelectorAll('.field-error-indicator,.field-success-indicator');indicators.forEach(indicator=>indicator.remove());}} removeFieldErrorIndicator(field){const parent=field.parentElement;if(parent){const indicator=parent.querySelector('.field-error-indicator');if(indicator){indicator.remove();}}} getFormData(formId){const form=this.forms[formId];const formData=new FormData(form);const data={};for(const [key,value] of formData.entries()){if(key.includes('[')){const match=key.match(/(\w+)\[(\d+)\]\[(\w+)\]/);if(match){const [,arrayName,index,fieldName]=match;if(!data[arrayName])data[arrayName]=[];if(!data[arrayName][index])data[arrayName][index]={};data[arrayName][index][fieldName]=value;}} else {data[key]=value;}} if(data.dateOfBirth){data.age=this.calculateAge(data.dateOfBirth);} if(data.visits){data.visits=data.visits.filter(visit=>visit&&visit.visitDate).map(visit=>({...visit,id: visit.id||this.generateId(),createdAt: visit.createdAt||this.getCurrentTimestamp()}));} if(!data.id){data.id=this.generateId();data.createdAt=this.getCurrentTimestamp();} data.updatedAt=this.getCurrentTimestamp();return data;} getCurrentTimestamp(){return Date.now();} async handleFormSubmit(formId){try {const validation=this.validateForm(formId);if(!validation.isValid){this.showValidationErrors(formId,validation.errors);if(typeof window!=='undefined'&&window.app&&window.app.components.errorHandler){window.app.components.errorHandler.handleError({type: window.app.components.errorHandler.errorTypes.VALIDATION,message: 'Please correct the form errors and try again.',context: `Form Validation-${formId}`,formId: formId,validationErrors: validation.errors});} const firstError=document.querySelector(`#${formId}.form-control.error`);if(firstError){firstError.scrollIntoView({behavior: 'smooth',block: 'center'});firstError.focus();} return;} const formData=this.getFormData(formId);const event=new CustomEvent('formSubmit',{detail:{formId,data: formData}});document.dispatchEvent(event);} catch(error){if(typeof window!=='undefined'&&window.app&&window.app.components.errorHandler){window.app.components.errorHandler.handleError({type: window.app.components.errorHandler.errorTypes.CLIENT,message: 'An error occurred while processing the form.',error: error,context: `Form Submission Handler-${formId}`,formId: formId});} else {console.error('Form submission error:',error);}}} validateForm(formId){const form=this.forms[formId];if(!form){return {isValid: false,errors:{form: 'Form not found'}};} const inputs=form.querySelectorAll('input[required],select[required],textarea[required]');let isValid=true;const errors={};inputs.forEach(input=>{if(!this.validateField(formId,input)){isValid=false;errors[input.name]='Validation failed';}});const customValidation=this.performCustomValidation(formId,form);if(!customValidation.isValid){isValid=false;Object.assign(errors,customValidation.errors);} this.validationErrors[formId]=errors;return {isValid,errors};} performCustomValidation(formId,form){const errors={};let isValid=true;const dobField=form.querySelector('[name="dateOfBirth"]');if(dobField&&dobField.value){const dob=new Date(dobField.value);const today=new Date();today.setHours(23,59,59,999);if(dob>today){errors.dateOfBirth='Date of birth cannot be in the future';isValid=false;this.showFieldError(formId,dobField,errors.dateOfBirth);}} const visitElements=form.querySelectorAll('.visit-item');if(visitElements.length>0){let hasValidVisit=false;visitElements.forEach((visitElement,index)=>{const dateField=visitElement.querySelector('[name*="visitDate"]');const medicationsField=visitElement.querySelector('[name*="medications"]');const observationsField=visitElement.querySelector('[name*="observations"]');if(dateField&&dateField.value&&(medicationsField&&medicationsField.value.trim()||observationsField&&observationsField.value.trim())){hasValidVisit=true;}});if(!hasValidVisit&&visitElements.length>0){errors.visits='At least one visit must have a date and either medications or observations';isValid=false;}} return {isValid,errors};} showValidationErrors(formId,errors){const form=this.forms[formId];if(!form)return;const existingSummary=form.querySelector('.form-error-summary');if(existingSummary){existingSummary.remove();} const errorSummary=document.createElement('div');errorSummary.className='form-error-summary';const errorList=Object.entries(errors).map(([field,message])=>`<li class="form-error-summary-item">${this.getFieldDisplayName(field)}: ${message}</li>`).join('');errorSummary.innerHTML=`<div class="form-error-summary-title"><span>⚠</span>Please correct the following errors:</div><ul class="form-error-summary-list">${errorList}</ul>`;form.insertBefore(errorSummary,form.firstChild);errorSummary.scrollIntoView({behavior: 'smooth',block: 'center'});} getFieldDisplayName(fieldName){const displayNames={firstName: 'First Name',lastName: 'Last Name',dateOfBirth: 'Date of Birth',placeOfResidence: 'Place of Residence',gender: 'Gender',visits: 'Visits',form: 'Form'};return displayNames[fieldName]||fieldName;} handleCancel(formId){if(this.hasUnsavedChanges(formId)){const confirmed=confirm('You have unsaved changes. Are you sure you want to cancel?');if(!confirmed)return;} const event=new CustomEvent('formCancel',{detail:{formId}});document.dispatchEvent(event);} markFormAsSaved(formId){this.unsavedChanges[formId]=false;const currentData=this.getFormData(formId);this.originalData[formId]=deepClone(currentData);try {if(typeof window!=='undefined'&&window.app&&window.app.components.changeTracker){window.app.components.changeTracker.markFormAsSaved(formId);}} catch(error){console.error('Error updating change tracker:',error);} console.log(`Form ${formId} marked as saved`);} destroyForm(formId){delete this.forms[formId];delete this.unsavedChanges[formId];delete this.validationErrors[formId];delete this.originalData[formId];try {if(typeof window!=='undefined'&&window.app&&window.app.components.changeTracker){window.app.components.changeTracker.untrackForm(formId);}} catch(error){console.error('Error removing form from change tracker:',error);} console.log(`Form ${formId} destroyed and cleaned up`);} hasUnsavedChanges(formId){return this.unsavedChanges[formId]||false;}} if(typeof module!=='undefined'&&module.exports){module.exports=FormManager;} class App {constructor(){this.isInitialized=false;this.components={};this.init=this.init.bind(this);this.handleDOMContentLoaded=this.handleDOMContentLoaded.bind(this);this.handleBeforeUnload=this.handleBeforeUnload.bind(this);} async init(){try {console.log('Initializing Patient Management System...');console.log('Step 1: Initializing components...');await this.initializeComponents();console.log('Step 1: Components initialized successfully');console.log('Step 2: Setting up event listeners...');this.setupEventListeners();console.log('Step 2: Event listeners set up successfully');console.log('Step 3: Initializing routing...');this.initializeRouting();console.log('Step 3: Routing initialized successfully');console.log('Step 4: Hiding loading screen...');this.hideLoadingScreen();console.log('Step 4: Loading screen hidden successfully');this.isInitialized=true;console.log('Application initialized successfully');} catch(error){console.error('Failed to initialize application:',error);console.error('Error stack:',error.stack);this.showError('Failed to initialize application. Please refresh the page.');}} async initializeComponents(){try {console.log('Starting component initialization...');console.log('Initializing ErrorHandler...');this.components.errorHandler=new ErrorHandler();console.log('Initializing ChangeTracker...');this.components.changeTracker=new ChangeTracker();console.log('Initializing ModalManager...');this.components.modalManager=new ModalManager();console.log('Initializing LogoManager...');this.components.logoManager=new LogoManager();await this.components.logoManager.preloadLogos(['svg','png']);console.log('Initializing UIRouter...');this.components.uiRouter=new UIRouter();this.components.uiRouter.registerDefaultRoutes();console.log('Initializing AuthenticationManager...');this.components.authManager=new AuthenticationManager();console.log('Initializing FormManager...');this.components.formManager=new FormManager();console.log('Initializing DataStorageManager...');this.components.dataStorage=new DataStorageManager();await this.components.dataStorage.initializeStorage();console.log('DataStorageManager initialized successfully');console.log('Initializing PerformanceOptimizer...');this.components.performanceOptimizer=new PerformanceOptimizer();await this.components.performanceOptimizer.initialize(this.components.dataStorage);console.log('PerformanceOptimizer initialized successfully');console.log('Initializing PatientManager...');this.components.patientManager=new PatientManager();await this.components.patientManager.initialize(this.components.dataStorage);console.log('PatientManager initialized successfully');this.setupChangeTrackingIntegration();console.log('Core components initialized');} catch(error){console.error('Error initializing components:',error);console.error('Error stack:',error.stack);try {this.components.authManager=this.components.authManager||{isAuthenticated:()=>false,getCurrentUser:()=>({username: 'Guest'}),logout:()=>{},checkUnsavedChanges:()=>false};this.components.formManager=this.components.formManager||new FormManager();if(!this.components.dataStorage){this.components.dataStorage=new DataStorageManager();await this.components.dataStorage.initializeStorage();} if(!this.components.patientManager){this.components.patientManager=new PatientManager();await this.components.patientManager.initialize(this.components.dataStorage);} console.log('Initialized with minimal components');} catch(fallbackError){console.error('Fallback initialization also failed:',fallbackError);throw error;}}} setupEventListeners(){window.addEventListener('beforeunload',this.handleBeforeUnload);window.addEventListener('popstate',(event)=>{console.log('Navigation event detected');});document.addEventListener('keydown',(event)=>{if(event.ctrlKey||event.metaKey){switch(event.key){case 's': event.preventDefault();console.log('Save shortcut detected');break;case 'f': event.preventDefault();console.log('Search shortcut detected');break;}}});document.addEventListener('formSubmit',(event)=>{this.handleFormSubmit(event.detail);});document.addEventListener('formCancel',(event)=>{this.handleFormCancel(event.detail);});} initializeRouting(){console.log('Initializing routing-bypassing authentication for development');this.showMainApplication();if(this.components.uiRouter){const initialRoute=window.location.hash.replace('#','')||'dashboard';setTimeout(()=>{this.components.uiRouter.navigateTo(initialRoute);},100);} else {const initialRoute=window.location.hash.replace('#','')||'dashboard';setTimeout(()=>{this.navigateToRoute(initialRoute);},100);}} hideLoadingScreen(){console.log('Attempting to hide loading screen...');const loadingScreen=document.getElementById('loading-screen');if(loadingScreen){console.log('Loading screen element found,adding hidden class');loadingScreen.classList.add('hidden');console.log('Loading screen classes after hiding:',loadingScreen.className);loadingScreen.style.display='none';console.log('Loading screen hidden successfully');} else {console.error('Loading screen element not found!');}} showLoginForm(){const mainContent=document.getElementById('main-content');if(mainContent){this.components.loginView=new LoginView(this.components.authManager);mainContent.innerHTML=this.components.loginView.render();mainContent.classList.remove('hidden');this.components.loginView.initialize();this.insertLoginLogo();}} insertHeaderLogo(){if(!this.components.logoManager)return;const logoContainer=document.getElementById('header-logo-container');if(logoContainer){const headerLogo=this.components.logoManager.createHeaderLogo({onClick:()=>{this.navigateToRoute('dashboard');}});logoContainer.appendChild(headerLogo);}} insertLoginLogo(){if(!this.components.logoManager)return;const loginLogoContainer=document.querySelector('.login-logo-container');if(loginLogoContainer){const loginLogo=this.components.logoManager.createLoginLogo();loginLogoContainer.appendChild(loginLogo);}} showMainApplication(){try {console.log('Showing main application...');const mainContent=document.getElementById('main-content');if(!mainContent){throw new Error('main-content element not found');} const user=this.components.authManager.getCurrentUser()||{username: 'Dr. S. Sahboub'};console.log('User for main application:',user);mainContent.innerHTML=`<!--Main Application Header--><header class="header"><div class="header-container"><div id="header-logo-container"><!--Logo will be inserted here by LogoManager--></div><div class="header-actions"><span class="user-info">Welcome,${user.username}</span><button class="btn btn-secondary logout-btn" id="logout-button">Logout</button></div></div></header><!--Navigation Menu--><nav class="nav"><div class="nav-container"><ul class="nav-list"><li class="nav-item"><a href="#dashboard" class="nav-link active" data-route="dashboard">Dashboard</a></li><li class="nav-item"><a href="#create-patient" class="nav-link" data-route="create-patient">Create Patient</a></li><li class="nav-item"><a href="#search-patients" class="nav-link" data-route="search-patients">Search Patients</a></li><li class="nav-item"><a href="#patient-list" class="nav-link" data-route="patient-list">Patient List</a></li></ul></div></nav><!--Main Content Area--><div class="main-container"><div class="content-header"><h1 class="content-title">Patient Management System</h1><p class="content-subtitle">Dr. S. Sahboub-Pulmonology Practice</p></div><!--Dashboard Content--><div id="dashboard-content" class="dashboard-content"><div class="dashboard-grid"><div class="dashboard-card" data-action="create-patient"><div class="dashboard-card-icon">👤</div><h3 class="dashboard-card-title">Create New Patient</h3><p class="dashboard-card-description">Add a new patient record with comprehensive medical information</p></div><div class="dashboard-card" data-action="search-patients"><div class="dashboard-card-icon">🔍</div><h3 class="dashboard-card-title">Search Patients</h3><p class="dashboard-card-description">Find existing patient records by name or other criteria</p></div><div class="dashboard-card" data-action="patient-list"><div class="dashboard-card-icon">📋</div><h3 class="dashboard-card-title">Patient List</h3><p class="dashboard-card-description">View and manage all patient records in the system</p></div><div class="dashboard-card" data-action="reports"><div class="dashboard-card-icon">📊</div><h3 class="dashboard-card-title">Reports</h3><p class="dashboard-card-description">Generate reports and analytics for patient data</p></div></div><!--Quick Stats Section--><div class="quick-stats"><div class="card"><div class="card-header"><h3 class="card-title">Quick Statistics</h3></div><div class="card-body"><div class="stats-grid"><div class="stat-item"><div class="stat-value">0</div><div class="stat-label">Total Patients</div></div><div class="stat-item"><div class="stat-value">0</div><div class="stat-label">Recent Visits</div></div><div class="stat-item"><div class="stat-value">0</div><div class="stat-label">This Month</div></div></div></div></div></div></div><!--Content area for other views(will be populated by routing)--><div id="dynamic-content" class="dynamic-content" style="display: none;"><!--Dynamic content will be loaded here--></div></div>`;mainContent.classList.remove('hidden');mainContent.style.display='block';console.log('Main content classes after showing:',mainContent.className);console.log('Main content display style:',mainContent.style.display);this.initializeNavigation();this.insertHeaderLogo();console.log('Main application displayed successfully');} catch(error){console.error('Error showing main application:',error);console.error('Error stack:',error.stack);const mainContent=document.getElementById('main-content');if(mainContent){mainContent.innerHTML=`<div style="padding: 20px;text-align: center;"><h1>Patient Management System</h1><p>Application loaded successfully!</p><p>Error details: ${error.message}</p><button onclick="location.reload()">Reload Application</button></div>`;mainContent.classList.remove('hidden');mainContent.style.display='block';console.log('Fallback interface displayed');}}} handleLoginSuccess(){if(this.components.loginView){this.components.loginView.destroy();this.components.loginView=null;} this.showMainApplication();setTimeout(()=>{this.navigateToRoute('dashboard');},100);} async handleLogout(){try {console.log('Logout button clicked');if(!this.components.authManager){console.error('AuthManager not available');this.performLogout();return;} if(!this.components.modalManager){console.error('ModalManager not available,using simple confirmation');const confirmed=confirm('Are you sure you want to logout?');if(confirmed){this.performLogout();} return;} const isSafeToLogout=await this.components.authManager.checkUnsavedChanges();if(isSafeToLogout){this.performLogout();return;} const changesDetails=this.components.authManager.getUnsavedChangesDetails();const userChoice=await this.components.modalManager.showLogoutConfirmation({changesDetails: changesDetails.descriptions});switch(userChoice){case 'save-and-exit': await this.saveAllChangesAndLogout();break;case 'exit-without-saving': this.performLogout();break;case 'cancel': console.log('Logout cancelled by user');break;default: console.log('Unknown logout choice:',userChoice);break;}} catch(error){console.error('Error during logout:',error);if(this.components.errorHandler){this.components.errorHandler.handleError({type: this.components.errorHandler.errorTypes.CLIENT,message: 'Error during logout process',error: error,context: 'Logout Handler'});} const forceLogout=confirm('An error occurred while checking for unsaved changes. '+'Do you want to force logout?(Unsaved changes may be lost)');if(forceLogout){this.performLogout();}}} simpleLogout(){const confirmed=confirm('Are you sure you want to logout?');if(confirmed){this.performLogout();}} performLogout(){try {if(this.components.changeTracker){this.components.changeTracker.clearAllTracking();} this.components.authManager.logout();this.showLoginForm();console.log('User logged out successfully');} catch(error){console.error('Error during logout process:',error);this.components.authManager.logout();this.showLoginForm();}} async saveAllChangesAndLogout(){try {console.log('Saving all changes before logout...');const changesDetails=this.components.authManager.getUnsavedChangesDetails();let saveErrors=[];for(const formInfo of changesDetails.forms||[]){try {await this.saveFormById(formInfo.id);console.log(`Saved form: ${formInfo.displayName}`);} catch(error){console.error(`Error saving form ${formInfo.displayName}:`,error);saveErrors.push(`${formInfo.displayName}: ${error.message}`);}} for(const componentInfo of changesDetails.components||[]){try {await this.saveComponentById(componentInfo.id);console.log(`Saved component: ${componentInfo.displayName}`);} catch(error){console.error(`Error saving component ${componentInfo.displayName}:`,error);saveErrors.push(`${componentInfo.displayName}: ${error.message}`);}} if(saveErrors.length>0){const continueLogout=confirm(`Some changes could not be saved:\n\n${saveErrors.join('\n')}\n\n`+'Do you still want to logout?(Unsaved changes will be lost)');if(!continueLogout){return;}} if(this.components.changeTracker){this.components.changeTracker.markAllAsSaved();} this.performLogout();} catch(error){console.error('Error saving changes before logout:',error);const forceLogout=confirm('An error occurred while saving changes. '+'Do you want to logout anyway?(Unsaved changes will be lost)');if(forceLogout){this.performLogout();}}} async saveFormById(formId){const formElement=document.getElementById(formId);if(!formElement){throw new Error(`Form ${formId} not found`);} const submitEvent=new Event('submit',{bubbles: true,cancelable: true});formElement.dispatchEvent(submitEvent);await new Promise(resolve=>setTimeout(resolve,500));} async saveComponentById(componentId){console.log(`Saving component: ${componentId}`);if(this.components.changeTracker){this.components.changeTracker.markComponentAsSaved(componentId);}} setupChangeTrackingIntegration(){if(!this.components.changeTracker)return;this.components.changeTracker.addChangeListener((hasChanges,details)=>{this.updateUnsavedChangesIndicator(hasChanges,details);});console.log('Change tracking integration set up');} updateUnsavedChangesIndicator(hasChanges,details){let indicator=document.querySelector('.unsaved-changes-indicator');if(hasChanges){if(!indicator){const header=document.querySelector('.header-container');if(header){indicator=document.createElement('div');indicator.className='unsaved-changes-indicator';header.appendChild(indicator);}} if(indicator){const changeCount=details.totalChanges||0;const itemCount=(details.forms?.length||0)+(details.components?.length||0);indicator.innerHTML=`<span class="indicator-icon">⚠️</span><span>Unsaved changes(${itemCount} item${itemCount!==1 ? 's' : ''})</span>`;indicator.style.display='flex';}} else {if(indicator){indicator.style.display='none';}}} showSessionExpiredMessage(){alert('Your session has expired. Please log in again.');this.showLoginForm();} async loadPatientListView(container){try {console.log('Loading patient list view...');const patientListView=new PatientListView(this.components.patientManager,this.components.performanceOptimizer);container.innerHTML=patientListView.render();await patientListView.initialize();this.currentView=patientListView;console.log('Patient list view loaded successfully');} catch(error){console.error('Failed to load patient list view:',error);container.innerHTML=`<div class="error-container"><h2>Error Loading Patient List</h2><p>Failed to load the patient list. Please try refreshing the page.</p><button class="btn btn-primary" onclick="location.reload()">Refresh Page</button></div>`;}} async loadPatientSearchView(container){try {console.log('Loading patient search view...');const patientSearchView=new PatientSearchView(this.components.patientManager,this.components.uiRouter);container.innerHTML=patientSearchView.render();patientSearchView.initialize();this.currentView=patientSearchView;window.patientSearchView=patientSearchView;console.log('Patient search view loaded successfully');} catch(error){console.error('Failed to load patient search view:',error);container.innerHTML=`<div class="error-container"><h2>Error Loading Search</h2><p>Failed to load the patient search. Please try refreshing the page.</p><button class="btn btn-primary" onclick="location.reload()">Refresh Page</button></div>`;}} async loadCreatePatientForm(container){try {console.log('Loading create patient form...');const formId='create-patient-form';const formHtml=this.components.formManager.renderPatientForm(formId);container.innerHTML=`<div class="content-header"><h2 class="content-title">Create New Patient</h2><p class="content-subtitle">Add a new patient record to the system</p></div><div class="card"><div class="card-body">${formHtml}</div></div>`;this.components.formManager.initializeForm(formId,{displayName: 'New Patient Form',description: 'Creating a new patient record',onChangeCallback:(hasChanges)=>{console.log('Form changes detected:',hasChanges);}});console.log('Create patient form loaded successfully');} catch(error){console.error('Failed to load create patient form:',error);container.innerHTML=`<div class="error-container"><h2>Error Loading Form</h2><p>Failed to load the patient creation form. Please try refreshing the page.</p><button class="btn btn-primary" onclick="location.reload()">Refresh Page</button></div>`;}} getComponentStatus(){return {isInitialized: this.isInitialized,authManager:{exists:!!this.components.authManager,type: typeof this.components.authManager},formManager:{exists:!!this.components.formManager,type: typeof this.components.formManager},dataStorage:{exists:!!this.components.dataStorage,isInitialized: this.components.dataStorage ? this.components.dataStorage.isInitialized : false,type: typeof this.components.dataStorage},performanceOptimizer:{exists:!!this.components.performanceOptimizer,type: typeof this.components.performanceOptimizer},patientManager:{exists:!!this.components.patientManager,isInitialized: this.components.patientManager ? this.components.patientManager.isInitialized : false,isReady: this.components.patientManager ? this.components.patientManager.isReady(): false,type: typeof this.components.patientManager}};} showError(message){const mainContent=document.getElementById('main-content');if(mainContent){mainContent.innerHTML=`<div class="main-container"><div class="card"><div class="card-body text-center"><h2 style="color: var(--danger-color);">Application Error</h2><p>${message}</p><button class="btn btn-primary" onclick="location.reload()">Reload Application</button></div></div></div>`;} const loadingScreen=document.getElementById('loading-screen');if(loadingScreen){loadingScreen.classList.add('hidden');} if(mainContent){mainContent.classList.remove('hidden');}} initializeNavigation(){const navLinks=document.querySelectorAll('.nav-link');navLinks.forEach(link=>{link.addEventListener('click',(event)=>{event.preventDefault();const route=event.target.getAttribute('data-route');if(this.components.uiRouter){this.components.uiRouter.navigateTo(route);} else {this.navigateToRoute(route);}});});const dashboardCards=document.querySelectorAll('.dashboard-card');dashboardCards.forEach(card=>{card.addEventListener('click',(event)=>{const action=event.currentTarget.getAttribute('data-action');this.handleDashboardAction(action);});});const logoutButton=document.getElementById('logout-button');if(logoutButton){logoutButton.addEventListener('click',(event)=>{event.preventDefault();this.handleLogout();});}} navigateToRoute(route,params={}){const navLinks=document.querySelectorAll('.nav-link');navLinks.forEach(link=>{link.classList.remove('active');if(link.getAttribute('data-route')===route){link.classList.add('active');}});const dashboardContent=document.getElementById('dashboard-content');const dynamicContent=document.getElementById('dynamic-content');if(route==='dashboard'){dashboardContent.style.display='block';dynamicContent.style.display='none';} else {dashboardContent.style.display='none';dynamicContent.style.display='block';this.loadRouteContent(route);} let hashUrl=route;if(Object.keys(params).length>0){const urlParams=new URLSearchParams(params);hashUrl+='?'+urlParams.toString();} window.location.hash=hashUrl;} loadRouteContent(route){const dynamicContent=document.getElementById('dynamic-content');const baseRoute=route.split('?')[0];switch(baseRoute){case 'create-patient': this.loadCreatePatientForm(dynamicContent);break;case 'search-patients': this.loadPatientSearchView(dynamicContent);break;case 'patient-list': this.loadPatientListView(dynamicContent);break;case 'patient-detail': this.loadPatientDetailView(dynamicContent,route);break;default: dynamicContent.innerHTML=`<div class="card"><div class="card-body text-center"><h3>Page Not Found</h3><p>The requested page could not be found.</p><button class="btn btn-primary" onclick="app.navigateToRoute('dashboard')">Go to Dashboard</button></div></div>`;}} handleDashboardAction(action){switch(action){case 'create-patient': if(this.components.uiRouter){this.components.uiRouter.navigateTo('create-patient');} else {this.navigateToRoute('create-patient');} break;case 'search-patients': if(this.components.uiRouter){this.components.uiRouter.navigateTo('search-patients');} else {this.navigateToRoute('search-patients');} break;case 'patient-list': if(this.components.uiRouter){this.components.uiRouter.navigateTo('patient-list');} else {this.navigateToRoute('patient-list');} break;case 'reports': alert('Reports functionality will be implemented in future updates.');break;default: console.log('Unknown dashboard action:',action);}} loadPatientSearchView(container){try {this.components.patientSearchView=new PatientSearchView(this.components.patientManager,this.components.uiRouter);container.innerHTML=this.components.patientSearchView.render();setTimeout(()=>{this.components.patientSearchView.initialize();window.patientSearchView=this.components.patientSearchView;},100);} catch(error){console.error('Failed to load patient search view:',error);container.innerHTML=`<div class="card"><div class="card-body text-center"><h3>Error Loading Search</h3><p>Failed to load patient search functionality.</p><button class="btn btn-primary" onclick="app.navigateToRoute('dashboard')">Back to Dashboard</button></div></div>`;}} async loadPatientListView(container){try {container.innerHTML=`<div class="content-header"><h2 class="content-title">Patient List</h2><p class="content-subtitle">View and manage all patient records</p></div><div class="card"><div class="card-body text-center"><div class="loading-spinner"></div><p>Loading patients...</p></div></div>`;const patients=await this.components.patientManager.getAllPatients();this.components.patientSearchView=new PatientSearchView(this.components.patientManager,this.components.uiRouter);this.components.patientSearchView.searchResults=patients;this.components.patientSearchView.currentSearchTerm='';container.innerHTML=`<div class="search-container"><div class="content-header"><h2 class="content-title">All Patients</h2><p class="content-subtitle">Complete list of patient records(${patients.length} patient${patients.length!==1 ? 's' : ''})</p></div><div class="search-results-container">${this.components.patientSearchView.renderSearchResults()}</div></div>`;window.patientSearchView=this.components.patientSearchView;} catch(error){console.error('Failed to load patient list:',error);container.innerHTML=`<div class="card"><div class="card-body text-center"><h3>Error Loading Patient List</h3><p>Failed to load patient records.</p><button class="btn btn-primary" onclick="app.navigateToRoute('dashboard')">Back to Dashboard</button></div></div>`;}} async loadPatientDetailView(container,route){try {const urlParams=new URLSearchParams(window.location.hash.split('?')[1]||'');const patientId=urlParams.get('patientId');if(!patientId){throw new Error('Patient ID not provided');} container.innerHTML=`<div class="card"><div class="card-body text-center"><div class="loading-spinner"></div><p>Loading patient details...</p></div></div>`;const patient=await this.components.patientManager.getPatient(patientId);if(!patient){throw new Error('Patient not found');} this.components.patientDetailView=new PatientDetailView(patient,this.components.patientManager,this.components.uiRouter);container.innerHTML=this.components.patientDetailView.render();setTimeout(()=>{this.components.patientDetailView.initialize();window.patientDetailView=this.components.patientDetailView;},100);} catch(error){console.error('Failed to load patient detail view:',error);container.innerHTML=`<div class="card"><div class="card-body text-center"><h3>Error Loading Patient Details</h3><p>${error.message}</p><button class="btn btn-primary" onclick="app.navigateToRoute('search-patients')">Back to Search</button></div></div>`;}} loadCreatePatientForm(container){container.innerHTML=`<div class="content-header"><h2 class="content-title">Create New Patient</h2><p class="content-subtitle">Add a new patient record to the system</p></div><div id="create-patient-form-container">${this.components.formManager.renderPatientForm('create-patient-form')}</div>`;setTimeout(()=>{this.components.formManager.initializeForm('create-patient-form');},100);} async handleFormSubmit(detail){const {formId,data}=detail;let loadingState=null;try {if(formId==='create-patient-form'){loadingState=this.components.errorHandler.showLoading('Creating patient record...');this.showFormLoading(formId,true);console.log('Creating patient with data:',data);if(!this.components.patientManager){console.error('PatientManager not found. Component status:',this.getComponentStatus());throw new Error('Patient manager not initialized');} if(!this.components.patientManager.isReady()){console.error('PatientManager not ready. Status:',this.components.patientManager.getStatus());console.error('Full component status:',this.getComponentStatus());throw new Error('Patient manager not ready');} const result=await this.components.patientManager.createPatient(data);if(result.success){this.components.errorHandler.showSuccess(result.message||'Patient record created successfully!');this.components.formManager.markFormAsSaved(formId);setTimeout(()=>{this.navigateToRoute('dashboard');},1500);} else {throw new Error(result.message||'Failed to create patient');}} else {console.log('Form submission for:',formId,data);}} catch(error){this.components.errorHandler.handleError({type: this.components.errorHandler.errorTypes.STORAGE,message: error.message,error: error,context: `Form Submission-${formId}`,formId: formId,formData: data,retryCallback:()=>this.handleFormSubmit(detail)});} finally {if(loadingState){this.components.errorHandler.hideLoading(loadingState.key);} this.showFormLoading(formId,false);}} handleFormCancel(detail){const {formId}=detail;if(formId==='create-patient-form'){this.navigateToRoute('dashboard');}} showFormLoading(formId,loading){const form=document.getElementById(formId);if(form){if(loading){form.classList.add('form-loading');} else {form.classList.remove('form-loading');}}} showToast(message,type='info'){const toastContainer=document.getElementById('toast-container');if(!toastContainer)return;const toastId=generateId();const toast=document.createElement('div');toast.id=toastId;toast.className=`toast ${type}`;toast.innerHTML=`<div class="toast-content"><p>${message}</p></div>`;toastContainer.appendChild(toast);setTimeout(()=>{const toastElement=document.getElementById(toastId);if(toastElement){toastElement.style.animation='slideOut 0.3s ease-in';setTimeout(()=>{toastElement.remove();},300);}},UI_CONFIG.toastDuration);} handleBeforeUnload(event){if(this.components.formManager){const hasUnsavedChanges=Object.keys(this.components.formManager.forms).some(formId=>this.components.formManager.hasUnsavedChanges(formId));if(hasUnsavedChanges){event.preventDefault();event.returnValue='You have unsaved changes. Are you sure you want to leave?';return event.returnValue;}}} handleDOMContentLoaded(){this.init();}} let app;window.logout=function(){if(window.app&&window.app.handleLogout){window.app.handleLogout();} else if(window.app&&window.app.simpleLogout){window.app.simpleLogout();} else {const confirmed=confirm('Are you sure you want to logout?');if(confirmed){window.location.reload();}}};window.debugApp=function(){console.log('===Application Debug Information===');if(window.app){console.log('App instance exists:',!!window.app);console.log('Component status:',window.app.getComponentStatus());if(window.app.components.patientManager){console.log('PatientManager status:',window.app.components.patientManager.getStatus());} if(window.app.components.dataStorage){console.log('DataStorage initialized:',window.app.components.dataStorage.isInitialized);}} else {console.log('App instance not found');} console.log('=====================================');};if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',()=>{app=new App();window.app=app;app.handleDOMContentLoaded();});} else {app=new App();window.app=app;app.handleDOMContentLoaded();} if(typeof module!=='undefined'&&module.exports){module.exports=App;} window.testPatientCreation=async function(){console.log('===Testing Patient Creation===');if(!window.app){console.error('App not available');return;} const testPatient={firstName: 'Test',lastName: 'Patient',dateOfBirth: '1990-01-01',age: 34,placeOfResidence: 'Test City',gender: 'male',visits: [{visitDate: '2024-01-01',medications: 'Test medication',observations: 'Test observations',additionalComments: 'Test comments'}]};try {console.log('Creating test patient:',testPatient);const result=await window.app.components.patientManager.createPatient(testPatient);console.log('Patient creation result:',result);return result;} catch(error){console.error('Patient creation failed:',error);console.error('Error stack:',error.stack);return {success: false,error: error.message};}};